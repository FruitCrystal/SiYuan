{
	"ID": "20230215210646-8oeiwuv",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4f6",
		"id": "20230215210646-8oeiwuv",
		"title": "网络编程",
		"updated": "20230215210806"
	},
	"Children": [
		{
			"ID": "20230215210806-6jojsuu",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230215210806-6jojsuu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络"
				}
			]
		},
		{
			"ID": "20230215210806-m8hd4by",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-m8hd4by",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TCP和UDP"
				}
			]
		},
		{
			"ID": "20230215210806-1win388",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-1win388",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-0n7o212",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-0n7o212",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-sjmk6oo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-sjmk6oo",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "TCP传输控制协议"
								}
							]
						},
						{
							"ID": "20230215210806-wgqh7g3",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230215210806-wgqh7g3",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"ID": "20230215210806-echsiji",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230215210806-echsiji",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-yvadqe7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-yvadqe7",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用TCP协议前，需要建立"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "TCP连接"
												},
												{
													"Type": "NodeText",
													"Data": "，形成数据传输的通道。"
												}
											]
										}
									]
								},
								{
									"ID": "20230215210806-enim05i",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230215210806-enim05i",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-1epzvb4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-1epzvb4",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "传输前，采用"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "三次握手"
												},
												{
													"Type": "NodeText",
													"Data": "方式，所以TCP是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "可靠的"
												}
											]
										}
									]
								},
								{
									"ID": "20230215210806-ocnb7yx",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230215210806-ocnb7yx",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-c3pyvul",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-c3pyvul",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在连接中可进行"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "大量数据"
												},
												{
													"Type": "NodeText",
													"Data": "的传输"
												}
											]
										}
									]
								},
								{
									"ID": "20230215210806-fkbgi7w",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230215210806-fkbgi7w",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-235eppt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-235eppt",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "每次传输完毕之后，都需要释放连接，效率低"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-inra920",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-inra920",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-d6gna8n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-d6gna8n",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "UDP用户数据报协议"
								}
							]
						},
						{
							"ID": "20230215210806-w20mcp2",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230215210806-w20mcp2",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"ID": "20230215210806-z4fsrom",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230215210806-z4fsrom",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-eggpn1d",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-eggpn1d",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "将数据、源、目的封装成包，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不需要建立连接"
												}
											]
										}
									]
								},
								{
									"ID": "20230215210806-zs9isys",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230215210806-zs9isys",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-n0ta1uf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-n0ta1uf",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "每个数据包大小限制在"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "64KB内"
												},
												{
													"Type": "NodeText",
													"Data": "，不适合大量传输"
												}
											]
										}
									]
								},
								{
									"ID": "20230215210806-re0zuhs",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230215210806-re0zuhs",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-0nstqnt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-0nstqnt",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "因为是无需连接的，所以是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不可靠的"
												}
											]
										}
									]
								},
								{
									"ID": "20230215210806-0637e5n",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230215210806-0637e5n",
										"updated": "20230215210806"
									},
									"Children": [
										{
											"ID": "20230215210806-gnxzwvd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230215210806-gnxzwvd",
												"updated": "20230215210806"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "发送数据时无需释放资源（因为不是面向连接的），速度快"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-nrmwutk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-nrmwutk",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TCP像打电话，你能够确认对方是在线的，肯定能收到消息；而UDP就像是发短信，你不能肯定对方是在线的，对方也不一定收得到信息"
				}
			]
		},
		{
			"ID": "20230215210806-x1d1xqt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-x1d1xqt",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中的网络"
				}
			]
		},
		{
			"ID": "20230215210806-2vyoi6p",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-2vyoi6p",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "InetAddress类"
				}
			]
		},
		{
			"ID": "20230215210806-kvwd8gu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-kvwd8gu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.out.println(InetAddress.getLocalHost());//DESKTOP-ND1O6EU/192.168.31.177\nSystem.out.println(InetAddress.getByName(\"DESKTOP-ND1O6EU\"));//DESKTOP-ND1O6EU/192.168.31.177\nSystem.out.println(InetAddress.getByName(\"www.baidu.com\"));//www.baidu.com/183.232.231.172\n//还有很多别的方法，这里不做过多演示\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-xmq5ko1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-xmq5ko1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Socket"
				}
			]
		},
		{
			"ID": "20230215210806-aafk645",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-aafk645",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设备之间通信要用到Socket，通信两端都要有Socket，实际上网络通信就是Scoket通信，Socket允许程序把网络连接当成一个流，数据在两个Socket之间通过IO传输，一般主动发起通信的应用成为客户端，等待通信请求从而做出回应的则称作服务端。而Socket的底层是TCP/IP协议。"
				}
			]
		},
		{
			"ID": "20230215210806-dax2u79",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-dax2u79",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ServerSocket serverSocket = new ServerSocket(8080);//传入一个端口号，获取一个socket对象\nSystem.out.println(\"正在监听localhost:8080\");\nserverSocket.accept();//监听成功才会往下执行，否则一直阻塞在这\nSystem.out.println(\"捕获成功！\");\nbyte[] buffer = new byte[1024];\nint len = 0;\nhile ((len = is.read(buffer))!=-1){\n    System.out.println(new String(buffer,0,len));//hello!\n}\nis.close();//关闭流\nsocket.close();//关闭socket\nserverSocket.close();//关闭serversocket\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-mkffbc1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-mkffbc1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Socket socket = new Socket(InetAddress.getLocalHost(), 8080);//连接8080端口\nOutputStream os = socket.getOutputStream();//获取到socket的IO流，往里面写东西\nos.write(\"hello!\".getBytes());//写一个hello\nos.close();//记得关闭流！\nsocket.close();//记得关闭连接！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-1imvfbe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-1imvfbe",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只执行server.java，并不会输出\"捕获成功\"，会阻塞在accept方法。这时候执行Client.java，就会输出\"捕获成功\"\n可以看到客户端使用Socket，服务端使用ServerSocket。\nSocket才是通讯的关键，ServerSocket则更像一个监听器，负责接受网络请求。ServerSocket中的accept方法意为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "接受"
				},
				{
					"Type": "NodeText",
					"Data": "一个网络请求，并返回他的socket，之后再对这个socket读写操作，再通过IO流传输给客户端。"
				}
			]
		},
		{
			"ID": "20230215210806-56h6gry",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-56h6gry",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-b3d4ip2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-b3d4ip2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的例子是客户端向服务端发送数据，服务端接受并输出的案例，很显然，他成功了。要是我想服务端再返回一些数据呢？"
				}
			]
		},
		{
			"ID": "20230215210806-ct72y45",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ct72y45",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ServerSocket serverSocket = new ServerSocket(8080);//传入一个端口号，获取一个socket对象\nSystem.out.println(\"正在监听localhost:8080\");\nserverSocket.accept();//监听成功才会往下执行，否则一直阻塞在这\nSystem.out.println(\"捕获成功！\");\nbyte[] buffer = new byte[1024];\nint len = 0;\nwhile ((len = is.read(buffer))!=-1){\n    System.out.println(new String(buffer,0,len));//hello!\n}\n//读完之后，输出一些东西到socket通道里\nOutputStream os = socket.getOutputStream();//获取socket的输出流\nos.write(\"Hello,Client!\".getBytes());//往里面写东西\nos.close();//关闭流\n\nis.close();//关闭流\nsocket.close();//关闭socket\nserverSocket.close();//关闭serversocket\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-ep79p19",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ep79p19",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Socket socket = new Socket(InetAddress.getLocalHost(), 8080);//连接8080端口\nOutputStream os = socket.getOutputStream();//获取到socket的IO流，往里面写东西\nos.write(\"hello!\".getBytes());//写一个hello\n\n//在关闭前读取服务端返回的消息~\nInputStream is = socket.getInputStream();//获取输入流\n\nbyte[] buffer = new byte[1024];\nint len = 0;\nwhile ((len = is.read(buffer))!=-1){\n    System.out.println(new String(buffer,0,len));//读取！\n}\nos.close();//关闭流！\nos.close();//记得关闭流！\nsocket.close();//记得关闭连接！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-qcxi5ih",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-qcxi5ih",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行之后，发现两个端会卡住，服务端可以收到客户端发来的消息，然后卡住，客户端则一动不动。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这是为什么呢？原因是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "os.write(\u0026quot;Hello,Client!\u0026quot;.getBytes());"
				},
				{
					"Type": "NodeText",
					"Data": "​这句代码，会一直阻塞在这，两个socket就像两个人再用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对讲机"
				},
				{
					"Type": "NodeText",
					"Data": "，说完一句话要有“over”，让对方知道你说完了。服务端是写入信息到socket里了，但是客户端不知道，所以客户端就一直在等服务端的信息，但是客户端就是不说“over”\n所以，使用完write方法之后，需要执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "socket.shutdownOutput();"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，以通知socket，信息准备好了，可以发送到另一端了。这是字节流的处理方式。\n那么字符流呢？\n字符流需要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "转换流"
				},
				{
					"Type": "NodeText",
					"Data": "，将字节流转换成字符流"
				}
			]
		},
		{
			"ID": "20230215210806-5wvipja",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-5wvipja",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "OutputStream os = socket.getOutputStream();//获取到socket的IO流，往里面写东西\n//使用转换流\nBufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(os)); \n//os.write(\"hello!\".getBytes());//写一个hello\nbufferedWriter.write(\"helloWorld!\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-t1x84q1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-t1x84q1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以用BufferedInputStream和BufferedOutputStream经行文件的传输。"
				}
			]
		},
		{
			"ID": "20230215210806-fvsvl48",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-fvsvl48",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UDP原理（了解"
				}
			]
		},
		{
			"ID": "20230215210806-lo80qcs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-lo80qcs",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，UDP因为不建立在连接之上，所有它"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "没有"
				},
				{
					"Type": "NodeText",
					"Data": "明确的客户端与服务端，只有发送端和接收端，而发送端和接收端是可以转换的，谁发送数据谁就是发送端。而数据发收发是通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DatagramSocket"
				},
				{
					"Type": "NodeText",
					"Data": "​对象实现的。\n其次，UDP在发送的时候，会把数据打包成一个DadagramPacket对象再发送给接收端。接收端接收之后会对其经行拆包，得到数据。"
				}
			]
		},
		{
			"ID": "20230215210806-0pnfpgh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230215210806-0pnfpgh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射"
				}
			]
		},
		{
			"ID": "20230215210806-9pbr2ne",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9pbr2ne",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射用于读取运行时的类对象及其内部成员（方法与变量），还可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "配置文件来指定读取的对象和方法，从而达到不修改源码却改变功能的能力。因为反射的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**forName**"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**getMethod**"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法都是通过字符串去指定某个类或方法的，所以可以使用Properties去实现指定读取的对象和方法。这就是反射的厉害之处"
				}
			]
		},
		{
			"ID": "20230215210806-lyhtjsm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-lyhtjsm",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射机制"
				}
			]
		},
		{
			"ID": "20230215210806-y8rwqc6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-y8rwqc6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "想要获取一个类，首先要加载这个类。"
				}
			]
		},
		{
			"ID": "20230215210806-m4gwm98",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-m4gwm98",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-4ghp4vo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-4ghp4vo",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-2ei7r6w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-2ei7r6w",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加载类"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-00hi6r9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-00hi6r9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Class类"
				},
				{
					"Type": "NodeText",
					"Data": "​中的静态方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public static Class\u0026lt;?\u0026gt; forName(String className)"
				},
				{
					"Type": "NodeText",
					"Data": "​，传入一个类名，获取这个类的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Class对象"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230215210806-oa7i9zw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-oa7i9zw",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-cnw86k5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-cnw86k5",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-70lkfa8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-70lkfa8",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过这个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Class对象"
								},
								{
									"Type": "NodeText",
									"Data": "中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public T newInstance()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法获取这个类的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "实例化对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-ya2k105",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-ya2k105",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-re18poi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-re18poi",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "还可以通过这个Class对象中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public Method getMethod(String name, Class\u0026lt;?\u0026gt;... parameterTypes)"
								},
								{
									"Type": "NodeText",
									"Data": "​方法去获取对象中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法对象（Method对象）"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-ra0ev2g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-ra0ev2g",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-dez5fut",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-dez5fut",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Method对象中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public Object invoke(Object obj, Object... args)"
								},
								{
									"Type": "NodeText",
									"Data": "​方法将方法调用。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-l3b2ol3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-l3b2ol3",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-62kdeya",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-62kdeya",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Class对象中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public Field getField(String name)"
								},
								{
									"Type": "NodeText",
									"Data": "​方法，用于获取对象的成员变量，但不能获取private属性。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-64owrpd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-64owrpd",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "示例："
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660545490735-70ad9fa8-463c-4256-a947-77b2cd808841.png#averageHue=%23124050\u0026clientId=u4c77b9b7-11fd-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=107\u0026id=ufd2ce4ad\u0026name=image.png\u0026originHeight=107\u0026originWidth=192\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=4096\u0026status=error\u0026style=none\u0026taskId=u32720a7c-ec70-49d5-b65e-c35aac7f2bd\u0026title=\u0026width=192"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-y21qys0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-y21qys0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHJvcGVydGllcw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "classpath=Reflect.util.Cat\nmethod=eat\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-lbzz305",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-lbzz305",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package Reflect.util;\n\npublic class Cat {\n    private String name = \"小黄\";\n    public float age = 0.25f;\n    public Cat(){\n\n    }\n    public Cat(String name){\n        this.name = name;\n    }\n    public void say(){\n        System.out.println(name+\"说：“喵喵喵~”\");\n    }\n    public void eat(){\n        System.out.println(name+\"说“我在吃饭~”\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-gk2jv8b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-gk2jv8b",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package Reflect;\n\nimport Reflect.util.Cat;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Properties;\n\npublic class Reflect_ {\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException {\n        Properties properties = new Properties();\n        properties.load(new FileInputStream(\"src/Reflect/config.properties\"));//读取properties中的配置项\n        String classPath = properties.getProperty(\"classpath\");//Cat.class\n        String methodName = properties.getProperty(\"method\");//eat\n\n        Class catClass = Class.forName(classPath);//获取Cat对象的Class对象\n//        Cat cat = (Cat)catClass.newInstance();这个方法已经被淘汰了\n        Cat cat = (Cat) catClass.getDeclaredConstructor().newInstance();//获取实例化对象建议使用这个方法\n        Method method = catClass.getMethod(methodName);//获取eat方法\n        method.invoke(cat);//调用Cat对象的eat方法\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-xg060p4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-xg060p4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在有反射的情况下，我们就可以直接修改Properties配置文件中method属性为say，在运行这个程序，就调用的是say方法。这样就实现了不修改源代码达到改变代码效果的功能！\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660550357173-1f5c1ee9-e542-464b-a7a7-be22ead0790c.png#averageHue=%23d2d8c6\u0026clientId=u4c77b9b7-11fd-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=632\u0026id=u26d09bc0\u0026name=image.png\u0026originHeight=632\u0026originWidth=1406\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=true\u0026size=380686\u0026status=error\u0026style=none\u0026taskId=u334c69a1-b317-4e5b-a93d-1483bf1643c\u0026title=%E5%9B%BE1-1\u0026width=1406"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "图1-1"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n所以反射主要作用于运行时的代码，正因为有了反射，java才是一门动态的语言。\n所以反射机制可以完成："
				}
			]
		},
		{
			"ID": "20230215210806-003v7ie",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-003v7ie",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-2ri3a04",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-2ri3a04",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-ljwxy8t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-ljwxy8t",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在运行时判断任意一个对象所属的类"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-am5hj1c",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-am5hj1c",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-gkc07fo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-gkc07fo",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在运行时构造任意一个类的对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-o80yy18",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-o80yy18",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-7zwogcd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-7zwogcd",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在运行时得到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "任意一个类"
								},
								{
									"Type": "NodeText",
									"Data": "所具有的成员变量和方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-kqmsskh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-kqmsskh",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-dpt48jb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-dpt48jb",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在运行时调用任意一个对象的成员变量或方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-5whnnb0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-5whnnb0",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-tybq2vq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-tybq2vq",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "生成动态代理"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-kfmunmz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-kfmunmz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Class类"
				}
			]
		},
		{
			"ID": "20230215210806-6b2gnxt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-6b2gnxt",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660623727301-f61a7747-a1e4-4c0a-8c6e-f131096972f2.png#averageHue=%23022e39\u0026clientId=u4c77b9b7-11fd-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=283\u0026id=uf07d801e\u0026name=image.png\u0026originHeight=283\u0026originWidth=924\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=true\u0026size=12213\u0026status=error\u0026style=none\u0026taskId=ua4a95ae4-6849-47da-a461-4b4089d0e58\u0026title=%E5%9B%BE1-2\u0026width=924"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "图1-2"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-9gpxa14",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-9gpxa14",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-34hbtno",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-34hbtno",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-snevr6m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-snevr6m",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Class对象也继承了Object，类图中默认隐藏了。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-lsf3ptd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-lsf3ptd",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-ir8e4wy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-ir8e4wy",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Class类的对象不是new出来的，而是系统创建的。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-hc0dybo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-hc0dybo",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-sai206u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-sai206u",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于某个类的Class对象，内存中"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "只有一份，因为类只加载一次！"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-qtl49uq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-qtl49uq",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-kk3mghb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-kk3mghb",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个实例化对象都会记得自己是由哪个Class对象所生成，所以实例化对象都有一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getClass"
								},
								{
									"Type": "NodeText",
									"Data": "​方法，以获取生成自己的Class对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-j6ry23n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-j6ry23n",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-5tiznki",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-5tiznki",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Class对象是存放在堆的"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-fpmaedg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230215210806-fpmaedg",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-036rozs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-036rozs",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Class类中有一系列API，通过他们可以得到一个类的完整结构。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-kc1b7at",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230215210806-kc1b7at",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-r60owym",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-r60owym",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类的字节码二进制数据，是放在方法区的，有的地方成为类的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "元数据"
								},
								{
									"Type": "NodeText",
									"Data": "（包括方法代码，变量名，方法名，访问权限等...）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-likak2l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-likak2l",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取Class对象的几种方法："
				}
			]
		},
		{
			"ID": "20230215210806-ocw1juf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-ocw1juf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-jt4w514",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-jt4w514",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-z31nqyi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-z31nqyi",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "代码阶段，此时Class对象还不存在，需要使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Class.forName()"
								},
								{
									"Type": "NodeText",
									"Data": "​来获取Class对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-44sljbq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-44sljbq",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-82dukuy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-82dukuy",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加载阶段，此时Class对象存在，可以用过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "类名.class"
								},
								{
									"Type": "NodeText",
									"Data": "​来获取Class对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-476u9jg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-476u9jg",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-h430buh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-h430buh",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "运行阶段，此时实例化对象已经生成，可以使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "对象名.getClass()"
								},
								{
									"Type": "NodeText",
									"Data": "​来获取Class对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-uywbd6l",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-uywbd6l",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-h5hwp8t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-h5hwp8t",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "还可以通过类加载器来获得Class对象（有4种类加载器）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ydfw76p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ydfw76p",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本数据类型（int、char、boolean、float、double、byte、long、short）使用如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int.class"
				},
				{
					"Type": "NodeText",
					"Data": "​即可获得Class类\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Class\u0026lt;Integer\u0026gt; integerClass = int.class;"
				},
				{
					"Type": "NodeText",
					"Data": "​有自动装箱和自动拆箱的过程。\n而包装类则用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer.TYPE"
				},
				{
					"Type": "NodeText",
					"Data": "​得到Class对象\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Class\u0026lt;Integer\u0026gt; type = Integer._TYPE_;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-630d0v4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-630d0v4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "哪些类型有Class对象？"
				}
			]
		},
		{
			"ID": "20230215210806-tq7voo2",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-tq7voo2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-53xb5x0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-53xb5x0",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-viflhyc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-viflhyc",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "外部类、成员内部类、静态内部类、局部内部类、匿名内部类"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-y4y2i1f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-y4y2i1f",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-svqv6ea",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-svqv6ea",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-lsyod60",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-lsyod60",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-wkiq3ps",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-wkiq3ps",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-nbstqfm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-nbstqfm",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-6oe3rqp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-6oe3rqp",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "枚举"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-fv9pji4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-fv9pji4",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-y9gtptc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-y9gtptc",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注解"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-qw1vgqt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230215210806-qw1vgqt",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-vi179ci",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-vi179ci",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基本数学类型"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-3k53za8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230215210806-3k53za8",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-9xz8rei",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-9xz8rei",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "void"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-vzrz42f",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-vzrz42f",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类加载"
				}
			]
		},
		{
			"ID": "20230215210806-k5nkge7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-k5nkge7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态加载"
				}
			]
		},
		{
			"ID": "20230215210806-32w1hl6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-32w1hl6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "编译的时候就会加载某个类，称为静态加载。"
				}
			]
		},
		{
			"ID": "20230215210806-0949neb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-0949neb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class StaticLoad {\n    public static void main(String[] args) {\n        Dog dog = new Dog();//如果没有引入Dog这个类，编译阶段就会报错,IDEA甚至在写代码的时候就会提示你错误\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-y1o3sxu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-y1o3sxu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "动态加载"
				}
			]
		},
		{
			"ID": "20230215210806-btk3g0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-btk3g0a",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "运行时"
				},
				{
					"Type": "NodeText",
					"Data": "才加载"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "需要的类"
				},
				{
					"Type": "NodeText",
					"Data": "，如果运行时不用该类，则不会报错，降低了依赖性。"
				}
			]
		},
		{
			"ID": "20230215210806-5zbn5gr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-5zbn5gr",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DynamicLoad {\n\tpublic static void main(String[] args) throws Exception{\n        Class dogClass = Class.forName(\"Dog\");//动态加载，加载到这条语句的时候，才会有异常，编译的时候是可以运行的，只会有警告\n        dogClass.getConstructor().newInstance();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-oddtl04",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-oddtl04",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果不会"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Class dogClass = Class.forName(\u0026quot;Dog\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​这一段代码在运行过程中不会被执行到（被switch嵌套，或其他情况），那么程序也不会异常终止。只有javac编译阶段会抛出警告。"
				}
			]
		},
		{
			"ID": "20230215210806-yu9ssu0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-yu9ssu0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类加载的时机"
				}
			]
		},
		{
			"ID": "20230215210806-xrqn149",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-xrqn149",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-20j8uf1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-20j8uf1",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-83std4x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-83std4x",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当对象创建的时候（new），静态加载"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-c257rrw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-c257rrw",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-tff6jl4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-tff6jl4",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当子类被加载的时候，父类也会被加载，静态加载"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-idzehd5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-idzehd5",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-p3cruok",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-p3cruok",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用类中的静态成员时，类也会被加载，静态加载"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-0ya5747",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-0ya5747",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-g0iqnqb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-g0iqnqb",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "反射（JDBC加载驱动）动态加载"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-d43v1z2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-d43v1z2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类的加载流程"
				}
			]
		},
		{
			"ID": "20230215210806-09rt36q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-09rt36q",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".java"
				},
				{
					"Type": "NodeText",
					"Data": "​源文件（通过javac）编译成"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".class"
				},
				{
					"Type": "NodeText",
					"Data": "​字节码文件，再运行这些字节码文件。\n运行的时候，首先就要经行类的加载（通过ClassLoader），需要注意的是，不是所有类都会被加载的。在加载过程中，JVM会将类的星系提取出来，存放在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "元空间"
				},
				{
					"Type": "NodeText",
					"Data": "中（JDK1.8之前存放在永久代），同时也会生成一个Class对象存放在内存"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "堆"
				},
				{
					"Type": "NodeText",
					"Data": "中。，此处的Class对象是为一个，加载一个类对应一个Class类。\n既然说和与加载的类唯一对应，如果我们尝试创建一个包名和类名都与jdk源文件一致的一个类。"
				}
			]
		},
		{
			"ID": "20230215210806-z37muzc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-z37muzc",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class String {    //JDK提供的String类也是\n    public static void main(String[] args) {\n        System.out.println(\"hello！\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-17fepns",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-17fepns",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这时候运行会报错，提示在java.lang.String中找不到main方法，但是我们是定义了main方法的呀？\n这实际上是ClassLoader的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "双亲委派机制"
				},
				{
					"Type": "NodeText",
					"Data": "在保护Java程序的正常运行。\n因为在运行Java程序的时候，String类已经加载过一次了，他的Class对象已经生成，String类对象的信息也已经收集完毕，所以我们这个String就不会被加载。所以实际调用的还是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "真lang包下的String类"
				},
				{
					"Type": "NodeText",
					"Data": "，此时main方法当然不存在了。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660648187314-69e695aa-153d-40da-9ff1-f9185878d96e.png#averageHue=%23f5f5f4\u0026clientId=uf49413ae-0415-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=786\u0026id=uc6b0cf74\u0026name=image.png\u0026originHeight=786\u0026originWidth=816\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=true\u0026size=214441\u0026status=error\u0026style=none\u0026taskId=u1e23face-37b5-46ed-8967-ba8c349f950\u0026title=%EF%BC%88%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%EF%BC%89%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6\u0026width=816"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "（自己编写的类的加载流程）双亲委派机制"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n书接上回，类的加载又分为三个阶段"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "加载Loading"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接Linking"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "初始化Initialization。"
				},
				{
					"Type": "NodeText",
					"Data": "其中连接又分为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "验证Verification"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "准备Perparation"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "解析Resolution类的加载"
				},
				{
					"Type": "NodeText",
					"Data": "阶段主要负责：将字节码（这个字节码可以来源于一个class文件，也可以是别的jar包，也可以来源于网络）转换成二进制字节流（方法、访问权限、变量...），将二进制字节流放在内存的方法区，并在堆中生成加载类的Class对象。"
				}
			]
		},
		{
			"ID": "20230215210806-auef0s7",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-auef0s7",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-7aq80at",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-7aq80at",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的验证"
				},
				{
					"Type": "NodeText",
					"Data": "阶段主要负责："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "文件格式验证（字节码以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**cafa babe**"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "开头）"
				},
				{
					"Type": "NodeText",
					"Data": "、元数据验证、字节码验证、引用符号验证。验证阶段来确保被加载出来的类是正确的。其目的是确保class字节码文件的字节流中包含的信息符合JVM的要求，且不会危害虚拟机的安全。\n下面我们随便打开几个class字节码文件看看："
				}
			]
		},
		{
			"ID": "20230215210806-xvjje79",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-xvjje79",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cafe babe 0000 003d 003f 0a00 0200 0307\n0004 0c00 0500 0601 0010 6a61 7661 2f6c\n616e 672f 4f62 6a65 6374 0100 063c 696e\n//后面省略\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-3bu7ort",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-3bu7ort",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cafe babe 0000 003d 0021 0a00 0200 0307\n0004 0c00 0500 0601 0010 6a61 7661 2f6c\n616e 672f 4f62 6a65 6374 0100 063c 696e\n6974 3e01 0003 2829 5608 0008 0100 0344\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-vlo0b87",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-vlo0b87",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到他们都以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cafababe"
				},
				{
					"Type": "NodeText",
					"Data": "​开头。"
				}
			]
		},
		{
			"ID": "20230215210806-o2jglqe",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-o2jglqe",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-477vbvv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-477vbvv",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的准备"
				},
				{
					"Type": "NodeText",
					"Data": "阶段主要负责：为类的静态变量分配内存，并将其初始化为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "默认值"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230215210806-5uexm2j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-5uexm2j",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class demo{\n    public int n1 = 10;//n1是对象拥有的属性，不是静态的，所以他不属于类，因此在准备阶段，JVM不会为他分配内存\n    public static int n2 = 20;//n2是静态变量，在准备阶段JVM会为他分配内存，并且默认初始化为0\n    public static final int n3 = 30;//n3是一个静态常量，和n2不一样，因此常量一旦赋值，就不能再发生变化，所以在准备阶段，n3就会被赋值为30\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-wue806p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-wue806p",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的解析"
				},
				{
					"Type": "NodeText",
					"Data": "阶段主要负责：将类中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "符号引用"
				},
				{
					"Type": "NodeText",
					"Data": "转换为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "直接引用"
				},
				{
					"Type": "NodeText",
					"Data": "\n所谓符号引用，就是类似"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int a =50;"
				},
				{
					"Type": "NodeText",
					"Data": "​这样的引用，因为a变量尚不存在于内存中，所以只能用符号来表示。通过准备阶段后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "符号引用"
				},
				{
					"Type": "NodeText",
					"Data": "就会变成"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "直接引用"
				},
				{
					"Type": "NodeText",
					"Data": "，即用内存地址来表示。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的初始化"
				},
				{
					"Type": "NodeText",
					"Data": "阶段主要负责：将成员变量赋值为用户设定的值。\n初始化的过程会有一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "收集类中所有静态变量的赋值动作"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "静态代码块中的语句，并合并"
				},
				{
					"Type": "NodeText",
					"Data": "。这一过程是由"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;clinit\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​(CLass init)方法实现的。"
				}
			]
		},
		{
			"ID": "20230215210806-2p5jjm6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-2p5jjm6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Cat{\n    static{\n        System.out.println(\"静态代码块被调用\");\n        number = 100;\n    }\n    static int number = 99;\n    int age = 1;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-a73yukq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-a73yukq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时\u003cclinit\u003e方法："
				}
			]
		},
		{
			"ID": "20230215210806-6p2ebni",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-6p2ebni",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cclinit\u003e(){\n    System.out.println(\"静态代码块被调用\");\n    //number = 100;会被收集，但是会被覆盖\n    number = 99;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-9dp9sy4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9dp9sy4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cclinit\u003e方法在多线程的环境中，会自动加锁同步，锁就是正在初始化的类，即不能有多个线程同时初始化一个类。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "正因为有这个机制，才能保证内存中某个类只有一个Class对象"
				}
			]
		},
		{
			"ID": "20230215210806-qic50sx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-qic50sx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " protected Class\u003c?\u003e loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {//锁是当前正在初始化的对象\n            // First, check if the class has already been loaded\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-thucxff",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-thucxff",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射获取类的结构性息"
				}
			]
		},
		{
			"ID": "20230215210806-g42jeqx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-g42jeqx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Class"
				}
			]
		},
		{
			"ID": "20230215210806-x8yz480",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-x8yz480",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Class对象指的是一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".java"
				},
				{
					"Type": "NodeText",
					"Data": "​源文件（源代码）应该编译器"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "javac"
				},
				{
					"Type": "NodeText",
					"Data": "​编译之后，形成的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".class"
				},
				{
					"Type": "NodeText",
					"Data": "​字节码文件；然后这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".class"
				},
				{
					"Type": "NodeText",
					"Data": "​字节码文件，经过类加载器"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ClassLoader"
				},
				{
					"Type": "NodeText",
					"Data": "​加载过后，就形成了一个Class对象存放在堆中。当我们实际运行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Cat cat = new Cat();"
				},
				{
					"Type": "NodeText",
					"Data": "​这段代码时，其实是根据Class对象创建的Cat"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "实例化对象"
				},
				{
					"Type": "NodeText",
					"Data": "。所以Cat对象"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "知道它自己属于哪一个Class对象"
				},
				{
					"Type": "NodeText",
					"Data": "，或者是，Cat对象知道，自己是哪一个Class对象所生成的。"
				}
			]
		},
		{
			"ID": "20230215210806-un8zzwa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-un8zzwa",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Field"
				}
			]
		},
		{
			"ID": "20230215210806-wbrnn4r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-wbrnn4r",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以访问public的属性，不能访问private的属性"
				}
			]
		},
		{
			"ID": "20230215210806-9pxpsid",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-9pxpsid",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Field params = catClass.getField(\"age\");\nSystem.out.println(params.get(cat));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-2jufzux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-2jufzux",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Field中的方法：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Object get(Object obj)"
				},
				{
					"Type": "NodeText",
					"Data": "​从某个对象中获取变量\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Object getDeclaredField(Object obj)"
				},
				{
					"Type": "NodeText",
					"Data": "​从某个对象中获取变量\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public int getModifiers()"
				},
				{
					"Type": "NodeText",
					"Data": "​获取这个变量的权限等级（私有、受保护、公共...）"
				}
			]
		},
		{
			"ID": "20230215210806-xg0tpdj",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230215210806-xg0tpdj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "default"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "0"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "public"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "private"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "protected"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "static"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "8"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "final"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "16"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-75c283m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-75c283m",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果某变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public static int num = 8;"
				},
				{
					"Type": "NodeText",
					"Data": "​,则他的Modifiers为public(1)+static(8)=9，返回的是相加的数字。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Class\u0026lt;?\u0026gt; getType()"
				},
				{
					"Type": "NodeText",
					"Data": "​以Class的类型返回变量的类型，即返回该类型的Class对象。"
				}
			]
		},
		{
			"ID": "20230215210806-lotkee1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-lotkee1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Method"
				}
			]
		},
		{
			"ID": "20230215210806-nvw9m7f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-nvw9m7f",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Method method = catClass.getMethod(methodName);\nmethod.invoke(cat);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-mf5fe3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-mf5fe3l",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Class\u0026lt;?\u0026gt; getReturnType()"
				},
				{
					"Type": "NodeText",
					"Data": "​获取方法的返回值类型的Class对象\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Class\u0026lt;?\u0026gt;[] getParameterTypes()"
				},
				{
					"Type": "NodeText",
					"Data": "​获取方法参数的类型Class对象数组\n还有一些望文生义的API不做解释"
				}
			]
		},
		{
			"ID": "20230215210806-iixlvfq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-iixlvfq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Constructor"
				}
			]
		},
		{
			"ID": "20230215210806-ioad8uh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ioad8uh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Constructor\u0026lt;T\u0026gt; getConstructor(Class\u0026lt;?\u0026gt;... parameterTypes)"
				},
				{
					"Type": "NodeText",
					"Data": "​获取有参构造器\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Constructor\u0026lt;T\u0026gt; getConstructor()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取无参构造器"
				}
			]
		},
		{
			"ID": "20230215210806-z4jukh8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-z4jukh8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Constructor constructor = catClass.getConstructor();\nSystem.out.println(constructor);//public Reflect.util.Cat()\nConstructor constructorWithParam = catClass.getConstructor(String.class);//public Reflect.util.Cat(java.lang.String)\nSystem.out.println(constructorWithParam);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-q84m1ek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-q84m1ek",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Constructor对象有这样一个方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public T newInstance(Object ... initargs)"
				},
				{
					"Type": "NodeText",
					"Data": "​用于实例化一个对象，这是Java9之后推荐使用的方法，而Class对象里面的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "newInstance()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法则被废弃了"
				}
			]
		},
		{
			"ID": "20230215210806-23w80hh",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-23w80hh",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-y7dxeg8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-y7dxeg8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以发现，我们在访问属性、调用方法的时候都需要传递这个方法的对象进去，这是为什么呢？\n因为，一个类就对应了一个Class对象，而一个Class对象可以拥有多个实例化对象。所以我们平常调用方法的时候，要用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "对象名.方法名"
				},
				{
					"Type": "NodeText",
					"Data": "​来调用，以声明，这个方法作用于这个对象。\n所以可以看出，方法在内存中的保存，只保存了方法本身，没有保存方法属于哪个对象。\n而在反射中，也是一样的道理，方法被Class对象收集起来了，而Class对象只有一个，方法不可能作用于Class对象吧。所以在使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "invoke"
				},
				{
					"Type": "NodeText",
					"Data": "​方法的时候，需要传递一个实例化对象，指定这个方法作用的目标。\n而成员变量也是同样的道理，需要指定是哪一个实例化对象，才能访问到他的成员变量。所以Filed对象中的get方法也需要传递一个实例化对象"
				}
			]
		},
		{
			"ID": "20230215210806-nic1mpc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-nic1mpc",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射调用性能优化"
				}
			]
		},
		{
			"ID": "20230215210806-h00q002",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-h00q002",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射会影响执行的速度， 因为反射基本是解释执行，解释的过程需要消耗时间，所以反射对执行速度有影响。\n但反射是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可优化"
				},
				{
					"Type": "NodeText",
					"Data": "的，Method、Field、Constructor对象都有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "setAccessible()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，这个方法用来设置Method、Field、Constructor对象内容的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可直接访问性"
				},
				{
					"Type": "NodeText",
					"Data": "，如果传递true，反射则不会检查该属性能否被直接访问。该属性默认是false的，即反射会检查每一个属性的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可直接访问性，每一个都检查，效率自然就低了。"
				}
			]
		},
		{
			"ID": "20230215210806-6qsgzcm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-6qsgzcm",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Method method = catClass.getMethod(methodName);\nmethod.setAccessible(true);//设为可直接访问\nmethod.invoke(cat);\n\nField field = catClass.getField(\"age\");\nfield.setAccessible(true);\nConstructor constructor = catClass.getConstructor();\nconstructor.setAccessible(true);\nConstructor constructorWithParam = catClass.getConstructor(String.class);\nconstructorWithParam.setAccessible(true);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-6eo9ino",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-6eo9ino",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Class类常用方法"
				}
			]
		},
		{
			"ID": "20230215210806-6ly8dcx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-6ly8dcx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public static Class\u0026lt;?\u0026gt; forName(String className)"
				},
				{
					"Type": "NodeText",
					"Data": "​根据类名来获取某个类的Class对象。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Field getField(String name)"
				},
				{
					"Type": "NodeText",
					"Data": "​根据变量名获取一个包含该变量的Field对象。通过Field中的get方法获取该变量\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Field[] getFields()"
				},
				{
					"Type": "NodeText",
					"Data": "​获取所有public变量（继承过来的也会获得\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Field[] getDeclaredFields() throws SecurityException"
				},
				{
					"Type": "NodeText",
					"Data": "​获取所有变量，私有的、受保护的也能获得（继承过来的也会获得"
				}
			]
		},
		{
			"ID": "20230215210806-954ufb2",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-954ufb2",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-3b4cpa2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-3b4cpa2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Method getMethod(String name, Class\u0026lt;?\u0026gt;... parameterTypes)"
				},
				{
					"Type": "NodeText",
					"Data": "​根据方法名获取包含该方法的Method对象，通过Method中的invoke方法调用方法\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Method[] getMethods()"
				},
				{
					"Type": "NodeText",
					"Data": "​获取所有public方法（继承过来的也会获得\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Method[] getDeclaredMethods() throws SecurityException"
				},
				{
					"Type": "NodeText",
					"Data": "​获取所有方法，不受权限限制（继承过来的也会获得"
				}
			]
		},
		{
			"ID": "20230215210806-cks1eqx",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-cks1eqx",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-94wa3eo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-94wa3eo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Package getPackage()"
				},
				{
					"Type": "NodeText",
					"Data": "​获取到该Class对象所在的包的Package对象。通过Package对象中的getName方法获取包名\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "String getName()"
				},
				{
					"Type": "NodeText",
					"Data": "​获得该Class对象的全类名，从com开始，如com.xx.xxx.xxx"
				}
			]
		},
		{
			"ID": "20230215210806-hqysf7e",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-hqysf7e",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-ls394iz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ls394iz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Constructor\u0026lt;T\u0026gt; getConstructor(Class\u0026lt;?\u0026gt;... parameterTypes)"
				},
				{
					"Type": "NodeText",
					"Data": "​通过构造器的参数类型，获取构造器\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Constructor\u0026lt;?\u0026gt;[] getConstructors() "
				},
				{
					"Type": "NodeText",
					"Data": "​获取所有构造器,不会获取父类的\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Constructor\u0026lt;?\u0026gt;[] getDeclaredConstructors() throws SecurityException"
				},
				{
					"Type": "NodeText",
					"Data": "​不会获取父类的"
				}
			]
		},
		{
			"ID": "20230215210806-om2t1lo",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-om2t1lo",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-hodjkq0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-hodjkq0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public native Class\u0026lt;? super T\u0026gt; getSuperclass();"
				},
				{
					"Type": "NodeText",
					"Data": "​获取父类的Class对象\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Class\u0026lt;?\u0026gt;[] getInterfaces()"
				},
				{
					"Type": "NodeText",
					"Data": "​以Class[]类型返回接口信息\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public \u0026lt;A extends Annotation\u0026gt; A getAnnotation()"
				},
				{
					"Type": "NodeText",
					"Data": "​以Annotation类型返回注解信息\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public Annotation[] getAnnotations()"
				},
				{
					"Type": "NodeText",
					"Data": "​以Annotation[]类型返回注解信息"
				}
			]
		},
		{
			"ID": "20230215210806-kbnnld9",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230215210806-kbnnld9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Mysql"
				}
			]
		},
		{
			"ID": "20230215210806-pfvayqg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-pfvayqg",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " Mysql的本质仍然是文件，数据库和数据表时存储在磁盘中的。而Redis的存在内存中的，所以速度快。"
				}
			]
		},
		{
			"ID": "20230215210806-ay8upoq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-ay8upoq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数"
				}
			]
		},
		{
			"ID": "20230215210806-ricf3cg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ricf3cg",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里拟定一张数据表"
				}
			]
		},
		{
			"ID": "20230215210806-30plvfp",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230215210806-30plvfp",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "students"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "score"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "张三"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "100"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "李四"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "105"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "王五"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "105"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "刘七"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "102"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NULL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "101"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ufwpjds",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-ufwpjds",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-lxgu1wt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-lxgu1wt",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-6u3yav1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-6u3yav1",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "统计函数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "COUNT()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-gxetck6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-gxetck6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "*"
				},
				{
					"Type": "NodeText",
					"Data": "​或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "列名"
				},
				{
					"Type": "NodeText",
					"Data": "​，统计符合条件的数量。"
				}
			]
		},
		{
			"ID": "20230215210806-kyl5o9h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-kyl5o9h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT COUNT(*) FROM students\n--5\nSELECT COUNT(name) FROM students\n--4,会排除NULL的值\nSELECT COUNT(name) FROM students WHERE id \u003e3\n--2\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-3cb4kf7",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-3cb4kf7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-tsr9k1a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-tsr9k1a",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-5muodns",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-5muodns",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "求和函数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SUM()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-d8zjnkk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-d8zjnkk",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "列名"
				},
				{
					"Type": "NodeText",
					"Data": "​，对该列数据求和"
				}
			]
		},
		{
			"ID": "20230215210806-qh98ar2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-qh98ar2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT SUM(score) FROM students\n--100+105+105+102+101\nSELECT SUM(score+id) FROM students\n--100+1 + 105+2 + 105+3 + 102+4 + 101+5\nSELECT SUM(score)/COUNT(id) FROM students\n--求平均分\nSELECT SUM(score),SUM(id) FROM students\n--多列求和\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-xbd3r7h",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-xbd3r7h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-pyyg5vs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-pyyg5vs",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-85sre6r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-85sre6r",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "平均数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AVG()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-o0qejcz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-o0qejcz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "列名"
				},
				{
					"Type": "NodeText",
					"Data": "​，对该列数据求平均"
				}
			]
		},
		{
			"ID": "20230215210806-lqrgh5u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-lqrgh5u",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT AVG(score) FROM students\n--其他跟求和一样\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-qfgogxn",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-qfgogxn",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-vejpu6a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-vejpu6a",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-jxsd39q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-jxsd39q",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "最大值"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MAX()"
								},
								{
									"Type": "NodeText",
									"Data": "​、最小值"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MIN()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-uvfuxzf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-uvfuxzf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "列名"
				},
				{
					"Type": "NodeText",
					"Data": "​，对该列数据求最大值"
				}
			]
		},
		{
			"ID": "20230215210806-nre1aj6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-nre1aj6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT MAX(score) AS Max_Socre, MIN(score) AS Min_Socre FROM students\n--AS是为这一列命名\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-o75wav6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-o75wav6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660885439389-8723ee95-f315-4d66-990f-245033262f03.png#averageHue=%23d3ac6c\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=70\u0026id=u74e5b7ea\u0026name=image.png\u0026originHeight=70\u0026originWidth=220\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=2316\u0026status=error\u0026style=none\u0026taskId=ufe30af2f-d1b7-4314-9d0b-58e8aa51506\u0026title=\u0026width=220"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-71zd8xv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-71zd8xv",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Select中的group by（分组）和having（限制结果）"
				}
			]
		},
		{
			"ID": "20230215210806-f72razp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-f72razp",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660886610394-56d8de39-7837-4685-950a-0872f7270109.png#averageHue=%23f7f4f2\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=211\u0026id=u3d9deed4\u0026name=image.png\u0026originHeight=211\u0026originWidth=202\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=6032\u0026status=error\u0026style=none\u0026taskId=u57862532-30c6-4ec2-9832-4880005acc4\u0026title=\u0026width=202"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "表中记录了部门ID（deptId）、薪资（salary），现在需要按照部门计算出各个部门的平均工资以及最高工。"
				}
			]
		},
		{
			"ID": "20230215210806-kt6glrd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-kt6glrd",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT AVG(salary) AS 平均薪资,MAX(salary) AS 最高薪资,deptId AS 部门ID FROM employ GROUP BY deptId\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-sx02s90",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-sx02s90",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660886748862-26d92b53-e21a-49d1-a3ab-683e8f24514e.png#averageHue=%23f5f2ef\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=102\u0026id=u0d183910\u0026name=image.png\u0026originHeight=102\u0026originWidth=308\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=5438\u0026status=error\u0026style=none\u0026taskId=u16feb4d0-445b-43c5-9fbd-266bc9ec536\u0026title=\u0026width=308"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n现在给员工们加上岗位，要求输出每个部门的每个岗位上，最高工资的员工。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660887143351-06870470-a2e1-4324-a47f-29b9b0dbaf49.png#averageHue=%23f6f3f0\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=207\u0026id=ue90a2ea5\u0026name=image.png\u0026originHeight=207\u0026originWidth=254\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=8940\u0026status=error\u0026style=none\u0026taskId=u5dbdba69-f045-4a7a-8a49-278ddbd0554\u0026title=\u0026width=254"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-apktzgs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-apktzgs",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT MAX(salary) AS 最高薪资,deptId AS 部门ID ,job AS 职位 FROM employ GROUP BY deptId,job\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-bzuv149",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-bzuv149",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660887152992-ee46a988-2e5c-4809-851c-6ee7c52671ef.png#averageHue=%23f4f1ee\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=164\u0026id=u8abc8af7\u0026name=image.png\u0026originHeight=164\u0026originWidth=241\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=7093\u0026status=error\u0026style=none\u0026taskId=u24cc10ac-d195-4495-801c-183e479c96e\u0026title=\u0026width=241"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n现在要求输出平均工资大于10000的部门。则需要使用Having来过滤条件"
				}
			]
		},
		{
			"ID": "20230215210806-0za3zd6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-0za3zd6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT AVG(salary) AS 平均薪资 ,deptId AS 部门ID FROM employ GROUP BY deptId HAVING AVG(salary)\u003e10000\n--或者用别名\nSELECT AVG(salary) AS 平均薪资 ,deptId AS 部门ID FROM employ GROUP BY 部门ID HAVING 平均薪资\u003e10000\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-x7a0iyu",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-x7a0iyu",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-7zavb7h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-7zavb7h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--字符串函数\nSELECT Charset(job) FROM employ--返回该列所使用的字符集\n\nSElECT CONCAT(id,'的工作是',job) FROM employ--拼接字符串\n/*\n1的工作是销售\n2的工作是开发\n3的工作是销售\n4的工作是开发...\n*/\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-tof0pf3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-tof0pf3",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外还有\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UCASE(str)"
				},
				{
					"Type": "NodeText",
					"Data": "​转成大写（UP）\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LCASE(str)"
				},
				{
					"Type": "NodeText",
					"Data": "​转成小写（LOW）\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LEFT(str,lengtj)"
				},
				{
					"Type": "NodeText",
					"Data": "​对一个字符串截取一定长度（从左边取\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RIGHT(str,length)"
				},
				{
					"Type": "NodeText",
					"Data": "​对一个字符串截取一定长度（从右边取\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LENGTH(str)"
				},
				{
					"Type": "NodeText",
					"Data": "​返回字符串的长度\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "REPLACE(str,search,repalce)"
				},
				{
					"Type": "NodeText",
					"Data": "​在str中搜索search中的字符串，并用replace中的内容去替换\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "STRCMP"
				},
				{
					"Type": "NodeText",
					"Data": "​逐字比较两个字符串的大小\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LTRIM"
				},
				{
					"Type": "NodeText",
					"Data": "​去除字符串前后两端的空格"
				}
			]
		},
		{
			"ID": "20230215210806-j9ndfxk",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-j9ndfxk",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-9xjcuoq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9xjcuoq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ABS(int)"
				},
				{
					"Type": "NodeText",
					"Data": "​绝对值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BIN(int)"
				},
				{
					"Type": "NodeText",
					"Data": "​十进制转换2进制\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CEILING(int)"
				},
				{
					"Type": "NodeText",
					"Data": "​向上取整\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FLOOR(int)"
				},
				{
					"Type": "NodeText",
					"Data": "​向下取整\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HEX(int)"
				},
				{
					"Type": "NodeText",
					"Data": "​十进制转16进制"
				}
			]
		},
		{
			"ID": "20230215210806-84gl7xa",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-84gl7xa",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-22njpm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-22njpm8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CURRENT_DATE()"
				},
				{
					"Type": "NodeText",
					"Data": "​当前日期\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CURRENT_TIME()"
				},
				{
					"Type": "NodeText",
					"Data": "​当前时间\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CURRENT_TIMESTAMP()"
				},
				{
					"Type": "NodeText",
					"Data": "​当前时间戳\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DATE_ADD(data,INTERVAL value DATETYPE)"
				},
				{
					"Type": "NodeText",
					"Data": "​:"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT DATE_ADD(NOW(),INTERVAL 10 MINUTE)"
				},
				{
					"Type": "NodeText",
					"Data": "​获取当前时间加上10分钟\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DATE_DUB(data,INTERVAL value DATETYPE)"
				},
				{
					"Type": "NodeText",
					"Data": "​：同上，不过是减少一定时间\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DATEDIFF(data1,date2)``SELECT DATEDIFF(NOW(),'2000-8-19')"
				},
				{
					"Type": "NodeText",
					"Data": "​//8035天以前\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NOW(data)"
				},
				{
					"Type": "NodeText",
					"Data": "​:2022-08-19 14:01:50\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DATE(NOW())"
				},
				{
					"Type": "NodeText",
					"Data": "​返回日期部分：2022-08-19\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "YEAR(DATE)"
				},
				{
					"Type": "NodeText",
					"Data": "​返回日期中的年份，月份是MONTH，日则是DAY。YEAR('2022-8-19')=\u003e2022\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UNIX_TIMESTAMP()"
				},
				{
					"Type": "NodeText",
					"Data": "​返回1970-1-1到现在的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "秒"
				},
				{
					"Type": "NodeText",
					"Data": "数"
				}
			]
		},
		{
			"ID": "20230215210806-npnoupp",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-npnoupp",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-w2wq24j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-w2wq24j",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MD5(str)"
				},
				{
					"Type": "NodeText",
					"Data": "​对一个字符串经行MD5加密，MD5都是32位的字符串，MD5算法已经被破解\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PASSWORD(str)"
				},
				{
					"Type": "NodeText",
					"Data": "​对一个字符串经行加密，"
				}
			]
		},
		{
			"ID": "20230215210806-q9k9tw0",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-q9k9tw0",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-iugjiji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-iugjiji",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IF(condition,exp1,exp2)"
				},
				{
					"Type": "NodeText",
					"Data": "​等价于3元运算符：condition？exp1：exp2\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FINULL(exp1,exp2)"
				},
				{
					"Type": "NodeText",
					"Data": "​如果exp1为NULL，则返回exp1，否则返回exp2\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CASE WHEN condition1 THEN exp1 "
				},
				{
					"Type": "NodeText",
					"Data": "​\n   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WHEN condition2 THEN exp2...."
				},
				{
					"Type": "NodeText",
					"Data": "​\n    "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ELSE exp5"
				},
				{
					"Type": "NodeText",
					"Data": "​\n     "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "END"
				},
				{
					"Type": "NodeText",
					"Data": "​多重判断。"
				}
			]
		},
		{
			"ID": "20230215210806-27w0hyu",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230215210806-27w0hyu",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-fj48n5a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-fj48n5a",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "日期字符串可以直接比较，如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IF(NOW()\u0026gt;'1992-1-1','YES','NO')"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-wn2yhaw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-wn2yhaw",
				"updated": "20230215210806"
			}
		},
		{
			"ID": "20230215210806-jygmu3b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-jygmu3b",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "高级查询"
				}
			]
		},
		{
			"ID": "20230215210806-k402z7t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-k402z7t",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "去重"
				}
			]
		},
		{
			"ID": "20230215210806-6sxwuws",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-6sxwuws",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "加入某表记录了所有学生的专业，此时我们需要获取专业组的数量，那么：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT COUNT( DISTINCT 专业组)"
				},
				{
					"Type": "NodeText",
					"Data": "​就可以得到专业组的个数，DISTINCT表示去重"
				}
			]
		},
		{
			"ID": "20230215210806-v4f8qzz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-v4f8qzz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "排序"
				}
			]
		},
		{
			"ID": "20230215210806-9kcm84v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9kcm84v",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT gae FROM students ORDER BY age"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-0ysp6r7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-0ysp6r7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分页"
				}
			]
		},
		{
			"ID": "20230215210806-9a7g2ad",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9a7g2ad",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT gae FROM students ORDER BY age limit strat rows"
				},
				{
					"Type": "NodeText",
					"Data": "​·"
				}
			]
		},
		{
			"ID": "20230215210806-hmpf2s0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-hmpf2s0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分组"
				}
			]
		},
		{
			"ID": "20230215210806-mrz078g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-mrz078g",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT gae FROM students ORDER BY age GROUP BY 专业组 limit strat rows"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-qzde8jc",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-qzde8jc",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "过滤"
				}
			]
		},
		{
			"ID": "20230215210806-ha953lu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ha953lu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Having用于GROUP BY之后。用于过滤数据"
				}
			]
		},
		{
			"ID": "20230215210806-jz9iet8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-jz9iet8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上几个高级查询的顺序是：分组、过滤、排序、分页"
				}
			]
		},
		{
			"ID": "20230215210806-3mhz54i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-3mhz54i",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分页查询"
				}
			]
		},
		{
			"ID": "20230215210806-qi3924x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-qi3924x",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT ... LIMIT start,rows"
				},
				{
					"Type": "NodeText",
					"Data": "​表示从start+1行开始取，取出rows行，start从0开始计算"
				}
			]
		},
		{
			"ID": "20230215210806-r7xt7xo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-r7xt7xo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT * FROM employ LIMIT 0, 2;--1~2行\nSELECT * FROM employ LIMIT 2, 2;--3~4行\nSELECT * FROM employ LIMIT 4, 2;--5~6行\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-yla9n0t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-yla9n0t",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得出公式：LIMIT 每页显示的记录条数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "（第几页-1）"
				},
				{
					"Type": "NodeText",
					"Data": "每页显示的记录条数"
				}
			]
		},
		{
			"ID": "20230215210806-1g34r6n",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-1g34r6n",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模糊查询与like操作符"
				}
			]
		},
		{
			"ID": "20230215210806-m1j77bl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-m1j77bl",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "%：表示0到多个任意字符\n_：表示单个任意字符"
				}
			]
		},
		{
			"ID": "20230215210806-awhlcpk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-awhlcpk",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT `name` FROM students WHERE `name` like '张%' --选出姓张的\nSELECT `name` FROM students WHERE `name` like '张_' --选出姓张的,且名字只有两个字\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-0s7renw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-0s7renw",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多表查询"
				}
			]
		},
		{
			"ID": "20230215210806-btl0v4o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-btl0v4o",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在经行多表查询的时候，不能直接在FROM之后添加表名，否则会触发"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "笛卡尔积查询"
				},
				{
					"Type": "NodeText",
					"Data": "​\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660919939422-2390b81e-193e-4dab-b6fd-a877a3c6bf6d.png#averageHue=%23f7f6f3\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=772\u0026id=ucd5fa049\u0026name=image.png\u0026originHeight=772\u0026originWidth=461\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=45501\u0026status=error\u0026style=none\u0026taskId=u89a421b8-0884-4553-89c1-158ccf9d520\u0026title=\u0026width=461"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n当两个表查询时，就从第一张表中取出一行，跟第二张表的每一行拼接。所以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**总条数=第一张表行数*第二章表行数**"
				},
				{
					"Type": "NodeText",
					"Data": "​\n这样多表查询默认处理返回的结果叫做"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "笛卡尔集"
				},
				{
					"Type": "NodeText",
					"Data": "​\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "解决多表的关键，就是要写出正确的过滤条件（WHERE），如id相同就是同一个人，id相同才应该放在一列所以我们需要加上条件"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WHERE employ.id=students.id"
				},
				{
					"Type": "NodeText",
					"Data": "​\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660920658634-d480bfc6-60d0-4777-bbc1-a9b259b35712.png#averageHue=%23f9f8f7\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=275\u0026id=u21cdc098\u0026name=image.png\u0026originHeight=275\u0026originWidth=462\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=13346\u0026status=error\u0026style=none\u0026taskId=ub2aa6619-95df-4cc9-96ff-cb077f5014d\u0026title=\u0026width=462"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n在选择需要输出的信息：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660920891120-31351749-8ba7-4ac6-9f1f-a26966335bc8.png#averageHue=%23fcfcfb\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=282\u0026id=u43bd985d\u0026name=image.png\u0026originHeight=282\u0026originWidth=826\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=11248\u0026status=error\u0026style=none\u0026taskId=uec3a7f9e-7604-471d-922d-1a96d9d0707\u0026title=\u0026width=826"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n这里最好说明这些属性出自那张表，因为不确定在另一张表中是否有重名的属性。"
				}
			]
		},
		{
			"ID": "20230215210806-vqyv5ku",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-vqyv5ku",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自链接"
				}
			]
		},
		{
			"ID": "20230215210806-90oxq9e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-90oxq9e",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "子链接是指在同一张表的连接查询，即将同一张表看作两张表。\n我们将学生表拿来拓展一下：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660922353983-9f2e3b09-2692-4d57-ae5d-2fba0fd4a0cf.png#averageHue=%23f8f7f6\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=132\u0026id=ue1e0e11b\u0026name=image.png\u0026originHeight=132\u0026originWidth=286\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=5001\u0026status=error\u0026style=none\u0026taskId=ud63864ba-46be-4719-9ce5-86b163c49be\u0026title=\u0026width=286"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "张三的同桌时李四，李四的同桌时王五，我该怎么同时输出学生的姓名以及他"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "同桌的姓名"
				},
				{
					"Type": "NodeText",
					"Data": "呢？\n可以发现，员工的姓名时通过deskmate的数字也就是学生的id来指向的。所以需要用到自链接。\n自连接要把一张表当成两张表来用，所以要给"
				}
			]
		},
		{
			"ID": "20230215210806-xen87ge",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-xen87ge",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT * FROM students one,students two\n--自连接查询，因为是同一张表当成两张来用，所以要给这两张表起不同的名字，这里一个起one一个起two\n--但是我们只需要2个人的姓名，所以只输出姓名即可\nSELECT one.name,two.name FROM students.one,students.two\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-w4ewq2u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-w4ewq2u",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660962148369-848ffca8-4634-432b-a984-c5b33d1cfdbd.png#averageHue=%23f6f5f4\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=582\u0026id=u4659bd19\u0026name=image.png\u0026originHeight=582\u0026originWidth=172\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=10761\u0026status=error\u0026style=none\u0026taskId=uae7e4431-81bd-45ca-8c25-4059b1f4640\u0026title=\u0026width=172"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "但是这个效果，很明显触发笛卡尔积查询了，需要添加过滤条件。\n不妨让我们看看笛卡尔集，找找过滤条件：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660962302644-a4c1495e-5ddb-4dcc-958e-2f6073d439ad.png#averageHue=%23f9f8f7\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=580\u0026id=u991e3b41\u0026name=image.png\u0026originHeight=580\u0026originWidth=597\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=32758\u0026status=error\u0026style=none\u0026taskId=ue1a366de-720b-4737-9712-f4b5fc0bbad\u0026title=\u0026width=597"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n可以发现，只有当one表的id等于two表的deskmate的时候，才是正确的匹配，所以我们加上过滤规则"
				}
			]
		},
		{
			"ID": "20230215210806-kyc5f79",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-kyc5f79",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT one.name,two.name FROM students one,students two WHERE one.deskmate=two.id\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-o38vjcb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-o38vjcb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660962543327-2a47e555-4410-4c7f-95ee-de2c0d955027.png#averageHue=%23f7f6f5\u0026clientId=u17369579-bcb4-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=132\u0026id=u75e1fb0d\u0026name=image.png\u0026originHeight=132\u0026originWidth=172\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=3072\u0026status=error\u0026style=none\u0026taskId=u21d697e8-cca9-4301-96da-804fc560000\u0026title=\u0026width=172"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "可以看到已经配对成功了。"
				}
			]
		},
		{
			"ID": "20230215210806-ip6onb1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-ip6onb1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "子查询"
				}
			]
		},
		{
			"ID": "20230215210806-tmui56u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-tmui56u",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先给出一个需求，假设我们需要查询跟张三喜欢同一个科目的所有同学（假设张三喜欢的科目是数学）\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660963584982-7d14b7f5-fca5-42b1-a7be-6bdd7d69ab34.png#averageHue=%23f7f6f5\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=150\u0026id=uad8906ec\u0026name=image.png\u0026originHeight=150\u0026originWidth=213\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=4998\u0026status=error\u0026style=none\u0026taskId=u97762c9c-b2ce-4419-880e-efa5af92bc1\u0026title=\u0026width=213"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-vcpj2t3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-vcpj2t3",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT name FROM students WHERE subject='数学'\n--很显然，这种不是最优的方法，因为我们把张三喜欢的科目写死了，如果张三明天不喜欢数学了呢？\n--所以我们要用到子查询，即一条SELECT语句包裹住一条SELECT语句\nSELECT name FROM students WHERE subject=(SELECT name FROM students WHERE name='张三')\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-cr075ri",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-cr075ri",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多行子查询"
				}
			]
		},
		{
			"ID": "20230215210806-lugf8te",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-lugf8te",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "子查询的条件，只有完全满足时，才会被选取出来。有没有一种操作，能够让查询满足其中一个条件的呢？那就要使用到多行查询配合子查询。"
				}
			]
		},
		{
			"ID": "20230215210806-t6eu215",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-t6eu215",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-tqdb3qg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-tqdb3qg",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-u9ltvgn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-u9ltvgn",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "多行查询"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-l9t28tb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-l9t28tb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "in"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字，如"
				}
			]
		},
		{
			"ID": "20230215210806-m9025yd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-m9025yd",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT name FROM students WHERE subject in ('数学','语文')\n--查询喜欢数学，或语文的同学，但不选同时喜欢数学和语文的。\n\n--加入子查询\nSELECT name FROM students WHERE subject in (SELECT name FROM students WHERE name='张三' OR name='刘七')\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-dsihqsw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-dsihqsw",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "子查询临时表"
				}
			]
		},
		{
			"ID": "20230215210806-qmj9go1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-qmj9go1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "子查询除了可以放在WHERE之后，还可以放在FROM之后，作为一张临时的表。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660974245518-e916d7d7-0997-427e-a20b-f67b5247b65b.png#averageHue=%23f6f4f1\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=220\u0026id=u574dded4\u0026name=image.png\u0026originHeight=220\u0026originWidth=256\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=8761\u0026status=error\u0026style=none\u0026taskId=u453ae8e4-462f-42ab-8907-142dfd31970\u0026title=\u0026width=256"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "如这张表，要求查询出id为奇数，然后工资大于3000的人"
				}
			]
		},
		{
			"ID": "20230215210806-ev7u5q7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ev7u5q7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT * FROM employ WHERE id%2!=0 AND salary\u003e3000\n--id为奇数的,且工资大于3000的\n\n--还可以这样写：\nSELECT * FROM (SELECT * FROM employ WHERE id%2!=0) temp WHERE temp.salary\u003e=3000\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-lfpqpq7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-lfpqpq7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ALL和ANY操作符"
				}
			]
		},
		{
			"ID": "20230215210806-82l0kis",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-82l0kis",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "数据a \u0026gt; ALL(数据源)"
				},
				{
					"Type": "NodeText",
					"Data": "​表明，数据a要比数据源中所有的数据都要大，即大于数据源中的最大值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "数据a \u0026gt; ANY(数据源)"
				},
				{
					"Type": "NodeText",
					"Data": "​表面，数据a只要大于数据源中的任意一个数据，即大于数据源中的最小值\n数据源可以是数组，也可以是一张表"
				}
			]
		},
		{
			"ID": "20230215210806-zs85za5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-zs85za5",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多列子查询"
				}
			]
		},
		{
			"ID": "20230215210806-3omz5md",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-3omz5md",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时过滤多列，即WHERE中的条件不止一个"
				}
			]
		},
		{
			"ID": "20230215210806-cun2zuw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-cun2zuw",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT * FROM employ WHERE (deptId, job) = (SELECT depyId,job FROM employ WHERE id = 1)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-erk9lnt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-erk9lnt",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查询部门和职位和1号员工一致的员工信息"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": " WHERE (deptId, job) = (SELECT depyId,job FROM employ WHERE id = 1)"
				},
				{
					"Type": "NodeText",
					"Data": "​就是多列子查询"
				}
			]
		},
		{
			"ID": "20230215210806-vrbdpqh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-vrbdpqh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "表复制"
				}
			]
		},
		{
			"ID": "20230215210806-v7kaja8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-v7kaja8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "INSERT INTO mytable (id,name,score) SELECT id,username,userscore FROM mytable02\n--把表二的数据选出去，一位位插进表一\n\nINSERT INTO mytable  SELECT * FROM mytable\n--表的自我复制，数据量会指数级爆炸，可以用来测试sql语句的性能\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-od93u16",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-od93u16",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那如何实现对一张表的数据去重呢？"
				}
			]
		},
		{
			"ID": "20230215210806-mrfz44h",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-mrfz44h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-lk1buyi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-lk1buyi",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-45j91yv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-45j91yv",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "首先创建一张结构一致的空表"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-s4qkl0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-s4qkl0c",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CREATE TABLE table_copy LIKE table1"
				},
				{
					"Type": "NodeText",
					"Data": "​使用LIKE关键字，简化操作，会字节复制table1的结构"
				}
			]
		},
		{
			"ID": "20230215210806-7m0pif6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-7m0pif6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-7hrvvok",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-7hrvvok",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-hti9qxf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-hti9qxf",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "把table1中的数据去重并取出来，放在table_copy表中"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-t1nfk9h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-t1nfk9h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INSERT INTO table_copy SELECT DISTINCT * FROM table1"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-jftnm37",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-jftnm37",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-qjx45y3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-qjx45y3",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-6qhe2mv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-6qhe2mv",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清空table1中的所有数据，把table_copy表中的数据复制到table1中"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-20k5gy3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-20k5gy3",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": " DELETE FROM table1INSERT INTO table1 SELECT FROM table_copy"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-eqzizog",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-eqzizog",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-jo3am9o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-jo3am9o",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-y9covh3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-y9covh3",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除table_copy表"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ryb31v5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ryb31v5",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DROP TABLE table_copy"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-sd6qpg0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-sd6qpg0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "外连接"
				}
			]
		},
		{
			"ID": "20230215210806-ffblji1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ffblji1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在经行多表查询的时候，都会通过WHERE语句，将不匹配的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "笛卡尔集"
				},
				{
					"Type": "NodeText",
					"Data": "​结果舍去。但如果，我们正好需要某一条未被匹配上的数据，那该怎么办呢？\n这里给出一个需求：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660979366762-ceed7ee5-7c2f-4b7e-ac5a-ff160a090b78.png#averageHue=%23f6f5f4\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=141\u0026id=u8aaea6b5\u0026name=image.png\u0026originHeight=141\u0026originWidth=130\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=3111\u0026status=error\u0026style=none\u0026taskId=u1163f970-e544-417f-bbec-69989ad48ab\u0026title=\u0026width=130"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660979225465-1861e909-040c-4c4f-89df-304e5275f5c7.png#averageHue=%23f9f8f7\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=141\u0026id=uc0808256\u0026name=image.png\u0026originHeight=141\u0026originWidth=128\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=2759\u0026status=error\u0026style=none\u0026taskId=uf87b30b2-312d-4d34-9339-14fcbd89fa7\u0026title=\u0026width=128"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "现给出两张表，一张students表和socre表，要求显示"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "所有人的姓名 id 成绩，如果该人无成绩，则显示为NULL"
				}
			]
		},
		{
			"ID": "20230215210806-wyh83h0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-wyh83h0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "左外连接"
				}
			]
		},
		{
			"ID": "20230215210806-2pi2wfc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-2pi2wfc",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "笛卡尔积查询中，左侧的表完全显示，那么这就是左外连接。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不管匹配不匹配，左边的表就是要全部显示出来。"
				},
				{
					"Type": "NodeText",
					"Data": "\n我们使用之前所学："
				}
			]
		},
		{
			"ID": "20230215210806-pqdvb26",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-pqdvb26",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT `name`,students.id,score FROM students,scores WHERE students.id=scores.id\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-k5phwaj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-k5phwaj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660979246411-7c6fd613-2d72-4005-8ab5-aac4d0f39ced.png#averageHue=%23f6f5f4\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=155\u0026id=u7ee6e689\u0026name=image.png\u0026originHeight=155\u0026originWidth=192\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=4629\u0026status=error\u0026style=none\u0026taskId=uc1a30b7b-32fe-4722-88fb-6acf0ea063e\u0026title=\u0026width=192"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "发现，两个表中，id对不上的人的信息都没被选出来，没有达到预期的效果。"
				}
			]
		},
		{
			"ID": "20230215210806-7s4b9hf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-7s4b9hf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--使用左外连接\nSELECT `name`,students.id,score FROM students LEFT JOIN scores ON students.id=scores.id\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-24b7lhe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-24b7lhe",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660979355593-8c820a96-2b84-4d6c-8c84-75a314817b97.png#averageHue=%23f7f7f5\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=184\u0026id=ud09777b3\u0026name=image.png\u0026originHeight=184\u0026originWidth=228\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=6434\u0026status=error\u0026style=none\u0026taskId=u990f270d-4d13-43c1-942d-4e68fb9ecfe\u0026title=\u0026width=228"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "使用左外连接后，位于左边的表（students）被完全显示了，而没有对应成绩的他们，成绩则显示为NULL，符合预期"
				}
			]
		},
		{
			"ID": "20230215210806-ri1glrq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-ri1glrq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "右外连接"
				}
			]
		},
		{
			"ID": "20230215210806-3jj6c7y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-3jj6c7y",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跟左外连接类似，右边的表完全显示"
				}
			]
		},
		{
			"ID": "20230215210806-vd61rb4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-vd61rb4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT `name`,students.id,score FROM students RIGHT JOIN scores ON students.id=scores.id\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-er652su",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-er652su",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1660979593841-ca0154ee-a353-4cec-8688-a12708e47d73.png#averageHue=%23f6f5f4\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=176\u0026id=u33556c94\u0026name=image.png\u0026originHeight=176\u0026originWidth=205\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=6126\u0026status=error\u0026style=none\u0026taskId=u42590a28-75bf-4fdb-bdfb-bdfbb2d7fd7\u0026title=\u0026width=205"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "这就是右外连接的结果"
				}
			]
		},
		{
			"ID": "20230215210806-ujbdr31",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-ujbdr31",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "约束"
				}
			]
		},
		{
			"ID": "20230215210806-mghrs71",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-mghrs71",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "约束用于确保数据满足某中条件。约束包含一下几种："
				}
			]
		},
		{
			"ID": "20230215210806-na2zshs",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-na2zshs",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-rowwzye",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-rowwzye",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-zjxnjhw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-zjxnjhw",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NOT NULL 非空"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-irgxx75",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-irgxx75",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-j64c7np",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-j64c7np",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "UNIQUE 唯一"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-cuto9xc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-cuto9xc",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-4xro1p1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-4xro1p1",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PRIMARY KEY 主键"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-t4q73y2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-t4q73y2",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-r6mupzz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-r6mupzz",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FOREGIN KEY 外键"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-8z21jti",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-8z21jti",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-2shtycn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-2shtycn",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CHECK 检查"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-snt0fce",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-snt0fce",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主键"
				}
			]
		},
		{
			"ID": "20230215210806-q4vte3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-q4vte3t",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主键是一条数据的唯一表示，它有如下几个规则："
				}
			]
		},
		{
			"ID": "20230215210806-3a6p5ih",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-3a6p5ih",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-dcy0975",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-dcy0975",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-11syuwr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-11syuwr",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一张表只能有一个主键，但可以是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "复合主键"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-hhz1awr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-hhz1awr",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "复合主键：把多行数据合起来看作一个主键"
				}
			]
		},
		{
			"ID": "20230215210806-qlelzc2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-qlelzc2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE table1(\n  id INT,\n  `name` VARCHAR(32),\n  PRIMARY KEY(id,`name`)--这就是复合主键，以后不能出现两条数据的id和name同时相同。\n)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-h1hjxra",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230215210806-h1hjxra",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "id"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "name"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "张三"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "李四"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "张三"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "张三"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-s4g9mes",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-s4g9mes",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "id和name只有同时相同，才会报错。"
				}
			]
		},
		{
			"ID": "20230215210806-ayo71uu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-ayo71uu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-o2w962d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-o2w962d",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-grr642m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-grr642m",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表中，主键列的数据不能重复，且不能为空"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-89ci3eo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-89ci3eo",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-t0gfneh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-t0gfneh",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "PRIMARY KEY(列名)"
								},
								{
									"Type": "NodeText",
									"Data": "​，请将它写在创建表的最后一行（如上面的代码块所示）"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-klc8gpu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-klc8gpu",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-j6h3b4j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-j6h3b4j",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每一个表都会有主键"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-shzdy8y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-shzdy8y",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "非空"
				}
			]
		},
		{
			"ID": "20230215210806-w2235rj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-w2235rj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE table1(\n  id INT,\n  `name` VARCHAR(32) NOT NULL,\n  PRIMARY KEY(id)--这就是复合主键，以后不能出现两条数据的id和name同时相同。\n)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-2bqx8yd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-2bqx8yd",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不解释"
				}
			]
		},
		{
			"ID": "20230215210806-76x3mu9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-76x3mu9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UNIQUE唯一"
				}
			]
		},
		{
			"ID": "20230215210806-ibd72wx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ibd72wx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE table1(\n  id INT,\n  `name` VARCHAR(32) UNIQUE,\n  PRIMARY KEY(id)\n)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-x5lgwqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-x5lgwqs",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "某个字段设置了UNIQUE之后，那么这列的值不能重复。\n细节："
				}
			]
		},
		{
			"ID": "20230215210806-7nvnfox",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-7nvnfox",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-uian9ty",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-uian9ty",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-gihlyxo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-gihlyxo",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果UNIQUE字段****LL"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "，那UNIQUE列"
								},
								{
									"Type": "NodeText",
									"Data": "可以有多个NULL**"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-acwexge",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-acwexge",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-9u3v70e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-9u3v70e",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一张表可以有多个unique字段"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-zyucyms",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-zyucyms",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "FOREIGN KEY外键"
				}
			]
		},
		{
			"ID": "20230215210806-i4bswnz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-i4bswnz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "外键用于定义"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "主表"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "从表"
				},
				{
					"Type": "NodeText",
					"Data": "之间的关系。\n现给出两张表:"
				}
			]
		},
		{
			"ID": "20230215210806-ykbrpuy",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230215210806-ykbrpuy",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "学生表(students"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id（PRIMARY KEY）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "class_id"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "张三"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "105"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "李四"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "106"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ajnynbm",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230215210806-ajnynbm",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "班级表(lessons"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id（FOREIGN KEY 与学生表的class_id绑定）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "105"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "106"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "MySQL"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-v46rkny",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-v46rkny",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "学生表为主表，班级表为从表，学生表的class_id与班级表中的id形成了外键绑定。\n那么此时我们想在学生表新增一个学生{id=3,name=\"王五\",class_id=300}，是添加不了的，因为班级表的id中，没有300这个值。\n如果映射关系已经形成，比如李四的106与班级表中的106。这时，我们无法直接删除班级表中的106那条数据，我们只能先删除李四，在删除班级表中的106数据。\n外键会引起数据的可拓展性变差，还会浪费磁盘空间。"
				}
			]
		},
		{
			"ID": "20230215210806-z1f1nix",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-z1f1nix",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "外键使用："
				}
			]
		},
		{
			"ID": "20230215210806-ip3r0cn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ip3r0cn",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE students(\n  id INT,\n  `name` VARCHAR(32) UNIQUE,\n  class_id INT,\n  PRIMARY KEY(id),\n  FOREIGN KEY (class_id) REFERENCE lessons(id)\n)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-rkehx64",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-rkehx64",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CHECK检查"
				}
			]
		},
		{
			"ID": "20230215210806-p1m0be9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-p1m0be9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：MYSQL5.7版本还不支持check，虽然你可以写，也不会报错，但是不会生效。\nCHECK用于强制某数据必须满足某一条件。"
				}
			]
		},
		{
			"ID": "20230215210806-rpjs7v4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-rpjs7v4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE students(\n  id INT,\n  `name` VARCHAR(32) UNIQUE,\n  class_id INT,\n  sex VARCHAR CHECK(sex IN('man','woman')),\n  --这样传数据的时候，sex就只能传递man或者woman\n  PRIMARY KEY(id),\n)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-zms5sep",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-zms5sep",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引"
				}
			]
		},
		{
			"ID": "20230215210806-obn4r2a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-obn4r2a",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最简单的提升数据库性能的方式。\n索引本身也会占用硬盘空间。但数据库性能提升非常牛。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CREATE INDEX 索引名称 ON 表名(字段)"
				},
				{
					"Type": "NodeText",
					"Data": "​就可以对该字段创建索引。"
				}
			]
		},
		{
			"ID": "20230215210806-1wr2u6o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-1wr2u6o",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE INDEX name_index ON students(`name`);\n--普通索引\n--或者\nALTER TABLE students ADD INDEX name_index (`name`)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-vxbprg8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-vxbprg8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们students表中有海量数据，我们为name做了引索，那么我们用SELECT语句查找（WHERE得是name）的时候速度就会飞快。但如果不是靠name来查找，那引索就不会生效。"
				}
			]
		},
		{
			"ID": "20230215210806-je09ro7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-je09ro7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT * FROM student WHERE `name` = '张伟'--飞快！\nSELECT * FROM student WHERE score = 98 --超慢！！因为没有为score创建索引\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-0mz8vsj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-0mz8vsj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SHOW INDEXES FROM students"
				},
				{
					"Type": "NodeText",
					"Data": "​或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SHOW KEYS FROM students"
				},
				{
					"Type": "NodeText",
					"Data": "​来查看students表的索引。\n可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DROP INDEX name_index ON students"
				},
				{
					"Type": "NodeText",
					"Data": "​来删除students表的name_index索引"
				}
			]
		},
		{
			"ID": "20230215210806-i3yberj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-i3yberj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引原理"
				}
			]
		},
		{
			"ID": "20230215210806-9xgt2vj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9xgt2vj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " 当我们没有索引时，执行查询语句的时候会进行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "全表扫描"
				},
				{
					"Type": "NodeText",
					"Data": "，所以扫描速度慢。当加入引索后，引索的那一列会变为二叉树，在二叉树中查找数据，效率就非常快了。"
				}
			]
		},
		{
			"ID": "20230215210806-wol8qxu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-wol8qxu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主键索引"
				}
			]
		},
		{
			"ID": "20230215210806-h3g08e8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-h3g08e8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主键自动会变为索引，所以主键就是一种索引。"
				}
			]
		},
		{
			"ID": "20230215210806-2jkp7ug",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-2jkp7ug",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE table1(\n  id INT,\n  `name` VARCHAR(32) NOT NULL,\n  PRIMARY KEY(id)--这里会自动创建主键索引\n)\n\n--删除主键索引\nALTER TABLE table1 DROP PRIMARY KEY--也可以直接用DROP INDEX id_index ON table1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-8u3nezp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-8u3nezp",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "唯一索引（UNIQUE）"
				}
			]
		},
		{
			"ID": "20230215210806-pofzcsj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-pofzcsj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE UNIQUE INDEX id_index ON students(id);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-f01frxo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-f01frxo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普通索引（INDEX）"
				}
			]
		},
		{
			"ID": "20230215210806-v1c0u2w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-v1c0u2w",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主键索引和唯一索引都是不可重复的，而普通索引是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可以重复"
				},
				{
					"Type": "NodeText",
					"Data": "的。因此效率没那么高"
				}
			]
		},
		{
			"ID": "20230215210806-81vpkt0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-81vpkt0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全文索引（FULLTEXE）"
				}
			]
		},
		{
			"ID": "20230215210806-m4zvz0s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-m4zvz0s",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全文索引适用于MyISAM，效率很低，一般不适用Mysql原生的全文索引。一般借助外部框架"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Solr"
				},
				{
					"Type": "NodeText",
					"Data": "​或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ElasticSearch"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-e2hmfc1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-e2hmfc1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事务"
				}
			]
		},
		{
			"ID": "20230215210806-lpsrrxh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-lpsrrxh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事务用于保证数据的一致性，它由一组相关的DML语句组成，该组DML语句"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "要么全部成功，要么要全部失败。"
				},
				{
					"Type": "NodeText",
					"Data": "如转账就要用事务来处理，用来保证数据的一致性。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意：InnoDB存储引擎支持事务，而MyISAM不支持事务"
				},
				{
					"Type": "NodeText",
					"Data": "\n 什么叫保证数据的一致性呢，这里就用转账做一个例子：\n假如银行有两位储户，张三和李四"
				}
			]
		},
		{
			"ID": "20230215210806-wen3yo1",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230215210806-wen3yo1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "bank"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id（Primary Key）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "money"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1001"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "张三"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5000"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2001"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "李四"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4000"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-2xr6i9f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-2xr6i9f",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在张三要给李四汇款100元，sql语句如下："
				}
			]
		},
		{
			"ID": "20230215210806-y5hkdtw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-y5hkdtw",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "UPDATE bank SET money=money-100 WHERE id = 1001--张三账户上扣100元\nUPDATE bank SET money=money+100 WHERE id = 2001--李四账户上加100元\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-dsfx7tg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-dsfx7tg",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假如在转账的时候，第一条语句成功执行后，第二条语句因为某种不可抗力执行失败，那就会发生很恐怖的时候，系统吞了100元。这是绝对不允许发生的事情。事务的机制，就由此诞生。\n把两条语句看成一个整理，要么都执行成功，要么都执行失败。\n到这里不难理解，在对数据库的数据经行操作的时候，是有风险的，而操作的语句，如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UPDATE"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INSERT"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DELETE"
				},
				{
					"Type": "NodeText",
					"Data": "​，这三条语句被称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "数据库操作语言（DML）"
				},
				{
					"Type": "NodeText",
					"Data": "​。\n当数据库在进行数据操作的时候，mysql会给表上加锁，防止其他用户同时操作表中数据，来避免像买票机制中的多买重买的问题。"
				}
			]
		},
		{
			"ID": "20230215210806-7fxaz7r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-7fxaz7r",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事务管理"
				}
			]
		},
		{
			"ID": "20230215210806-31o2q68",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230215210806-31o2q68",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230215210806-m4c4x9n",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230215210806-m4c4x9n",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "mysql中对事务的几个重要操作"
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-3x6uymp",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-3x6uymp",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-aassdwr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-aassdwr",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-6yp6a57",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-6yp6a57",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "start transaction ：开始一个事务"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-77qqdgq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-77qqdgq",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-yujzt06",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-yujzt06",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "savepoint  保存点名 ：设置一个保存点，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "用于回档"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-mol58jt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-mol58jt",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-d4lbmbx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-d4lbmbx",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "rollback 保存点名：回退事务，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "回到某一个存档"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-b9krh1o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-b9krh1o",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-hin2tjf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-hin2tjf",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "rollback：回退全部事务"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-jk677zy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-jk677zy",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-mpjkan4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-mpjkan4",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "commit：提交事务，执行所有操作，不能回退。一旦提交，就没有后悔药了。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-0etmhv2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-0etmhv2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE table01(\n  id INT,\n  `name` VARCHAR(32)\n)\n\nSTART TRANSCITION--开始事务\nSET autocommit=off--关闭自动提交\n\nSAVEPOINT point0--设置保存点，这个保存点下，数据库的内容是空的\n\nINSERT INTO table01 VALUES(100,`tom`)--执行一条DML语句\n\nSAVEPOINT point1--设置保存点\n\nINSERT INTO table01 VALUES(100,`jack`)--执行一条DML语句，此时数据库有两条数据\n\nROLLBACK TO point1 --回到point1存档，此时数据库的数据库有一条数据{100,`tom`}\n\nROLLBACK TO point0 --回到point0存档，此时数据库的数据库就没了\n\nROLLBACK --回退到事务开始的状态\n\nCOMMIT --提交事务，后面就不能再回退了，所有操作生效，由于COMMIT之前执行的操作是ROLLBACK回退到最初的模样，数据库就空了，而且无法复原，两个保存点都会被删除。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-ktw56ry",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-ktw56ry",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "保存点SavePoint"
				}
			]
		},
		{
			"ID": "20230215210806-hvg8gg1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-hvg8gg1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/jpeg/29698283/1661059578723-768e5902-d96b-40f0-a9f9-e3a0b8accbe8.jpeg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n如上图设置了3个保存点。如果我们第一次就执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ROLLBACK TO 保存点1"
				},
				{
					"Type": "NodeText",
					"Data": "​那么"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "保存点2"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "保存点3"
				},
				{
					"Type": "NodeText",
					"Data": "​都会"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "被删除"
				},
				{
					"Type": "NodeText",
					"Data": "！"
				}
			]
		},
		{
			"ID": "20230215210806-kjucbbq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-kjucbbq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回滚RollBack"
				}
			]
		},
		{
			"ID": "20230215210806-4hao3cq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-4hao3cq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回滚到一个保存点之后，在这个保存点"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "之后"
				},
				{
					"Type": "NodeText",
					"Data": "的保存点都会被删除。"
				}
			]
		},
		{
			"ID": "20230215210806-qscpj1y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-qscpj1y",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提交Commit"
				}
			]
		},
		{
			"ID": "20230215210806-e4t0d3j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-e4t0d3j",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事务会自动提交，所以在开始事务的时候需要手动设置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SET autocommit=off"
				},
				{
					"Type": "NodeText",
					"Data": "​\n提交后，数据所发生的变化就被确定了，事务结束，删除保存点，释放锁，数据生效。"
				}
			]
		},
		{
			"ID": "20230215210806-7evra96",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-7evra96",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隔离级别"
				}
			]
		},
		{
			"ID": "20230215210806-7d4c4s6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-7d4c4s6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当有多个连接在操作数据库的时候，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。\n如果没有隔离可能会发生以下问题："
				}
			]
		},
		{
			"ID": "20230215210806-hjd2j46",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-hjd2j46",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-fqcdyfz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-fqcdyfz",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-5zqcw8j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-5zqcw8j",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "脏读（Dirty Read）：当一个事务读取另一个事务尚未提交的操作时，产生脏读。（例如：修改到一半，准备打算放弃修改的时候的数据被读取了）"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-q4gafxo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-q4gafxo",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-ksrwclw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-ksrwclw",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不可重复读（Nonrepeatable Read）：多次查询某数据，而此时有其他事务"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "提交"
								},
								{
									"Type": "NodeText",
									"Data": "的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "修改或删除表中的数据"
								},
								{
									"Type": "NodeText",
									"Data": "，因此返回的结果每次都不一样。这就是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "_不可重复读_"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-r9ln820",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-r9ln820",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-rtbps18",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-rtbps18",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "幻读多次查询某数据，而此时有其他事务该表"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "提交插入数据"
								},
								{
									"Type": "NodeText",
									"Data": "，因此返回的结果每次都不一样。这就是_"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "幻读"
								},
								{
									"Type": "NodeText",
									"Data": "_。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-7cc784e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-7cc784e",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-rg182cn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-rg182cn",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "脏读是发生在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "事务未提交"
								},
								{
									"Type": "NodeText",
									"Data": "的时候的，而不可重复读和幻读是发生在事务"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "已提交"
								},
								{
									"Type": "NodeText",
									"Data": "之后的。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-cqeqklj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-cqeqklj",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-5oyux01",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-5oyux01",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为什么这些问题是有害的？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-8jerqxj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-8jerqxj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为我们在查询数据的时候，查询的对象应该是静态的（我链接的时候是怎么样的，查询的时候也是怎么样的）。如果一个数据库被100万台电脑连接了，这100万台电脑疯狂地对数据经行修改，那我在查询的时候，表的数据是在变化的，所以我查询时候WHRER的条件是不确定的，因为他是动态的。所以这些问题是有害的。\n简单来说：\n不能说我看到数据的id是100，当我输入完查询指令的时候，id就被被人改成3156了，这样我永远也查不到数据。即使id被人改了，在我查询的时候，我搜索id=100，也得搜得到。"
				}
			]
		},
		{
			"ID": "20230215210806-z6euz6e",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230215210806-z6euz6e",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230215210806-ag3mfox",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230215210806-ag3mfox",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "隔离几别定义了事务与事务之间的隔离程度"
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-0zmbxoe",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||||",
				"id": "20230215210806-0zmbxoe",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "隔离级别"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "脏读"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "不可重复读"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "幻读"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "是否加锁"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "读取未提交"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "✔️"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "✔️"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "✔️"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "读取已提交"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "✔️"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "✔️"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可重复读"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可串行化"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "❌"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "✔️"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-tip6ehf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-tip6ehf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "✔️：可能出现\n❌：不会出现\n可以发现，读取未提交是隔离几别最弱的，不但可能会发生三种情况，还没有锁。\n可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT @@tx_isolation"
				},
				{
					"Type": "NodeText",
					"Data": "​查看隔离级别\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Mysql中默认的隔离级别是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**可重复读**"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，但我们在项目中一般用读已提交(Read Commited)这个隔离级别！"
				}
			]
		},
		{
			"ID": "20230215210806-ajy86rs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-ajy86rs",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "储存引擎"
				}
			]
		},
		{
			"ID": "20230215210806-cg3v2k8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-cg3v2k8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MySQL的表类型由储存引擎（Storage Engines）决定，而储存引擎用的比较多的是："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MyISAM"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "innoDB(默认)"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Memory(存在内存例，效率极高)"
				},
				{
					"Type": "NodeText",
					"Data": "​\n而表类型一共有6种，分别是：CSV、Memory、ARCHIVE、MRG_MYISAM、MyISAM、innoDB\n这六种又分为两大类：一类是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "事务安全型（支持事务）"
				},
				{
					"Type": "NodeText",
					"Data": "，比如innoDB；其余的都是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "非事务安全型（不支持事务）"
				}
			]
		},
		{
			"ID": "20230215210806-11rvqli",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-11rvqli",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MyISAM"
				}
			]
		},
		{
			"ID": "20230215210806-u3nxdj5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-u3nxdj5",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它不支持事务，也不支持外键，但是访问速度很快。锁机制为表锁。\n常用于基本的CRUD操作，不需要事务。"
				}
			]
		},
		{
			"ID": "20230215210806-d8mp08b",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-d8mp08b",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "innoDB"
				}
			]
		},
		{
			"ID": "20230215210806-79c0qqy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-79c0qqy",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它支持事务，效率不是很高，而且引索会额外占用硬盘空间，而且它是基于哈希的，锁机制是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "行锁"
				},
				{
					"Type": "NodeText",
					"Data": "​。\n需要事务的时候就用它，别无选择。"
				}
			]
		},
		{
			"ID": "20230215210806-9ajb6v9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-9ajb6v9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Memory"
				}
			]
		},
		{
			"ID": "20230215210806-12bszh2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-12bszh2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在内存种创建的数据表，是临时的，访问速度极快。但是一旦服务被关系，数据表中的数据就会消失，但是表的结构还在。而且它是基于哈希的，锁机制为表锁。\n常用于用户的在线状态表。"
				}
			]
		},
		{
			"ID": "20230215210806-oxxmap8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-oxxmap8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "视图"
				}
			]
		},
		{
			"ID": "20230215210806-x35gf1n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-x35gf1n",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "视图是一个虚拟表，其内容由查询来（SELECT）定义，视图的数据来自对应的真实表（基表）。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1661091155839-316bd259-a1c8-481c-992d-263574bdc11e.png#averageHue=%233a4f50\u0026clientId=u5d2cb8db-e54b-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=397\u0026id=ua8f48f81\u0026name=image.png\u0026originHeight=397\u0026originWidth=750\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=405573\u0026status=error\u0026style=none\u0026taskId=ufc4b72ed-708a-47e6-88ea-8a67b914df4\u0026title=\u0026width=750"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-ep0r0p1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-ep0r0p1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "视图的使用"
				}
			]
		},
		{
			"ID": "20230215210806-a00m87d",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-a00m87d",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-jz0jxhy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-jz0jxhy",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-1hk4hgl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-1hk4hgl",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CREATE VIEW 视图名 AS SELECT .... FROM ...(WHERE...)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-nmcvakv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-nmcvakv",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-09h2alf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-09h2alf",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ALTER VIEW 视图名 AS SELECT ... FROM..."
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-gq9wb30",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-gq9wb30",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-t3jrhej",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-t3jrhej",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SHOW CREATE VIEW 视图名"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-2eia3gz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-2eia3gz",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-63l92yu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-63l92yu",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DROP VIEW ...视图名（剩余参数，可以传多个）"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-inaqayq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-inaqayq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ACID"
				}
			]
		},
		{
			"ID": "20230215210806-psjzicx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230215210806-psjzicx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC"
				}
			]
		},
		{
			"ID": "20230215210806-2tipd11",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-2tipd11",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC是为了访问不同的数据库(Mysql\\Oracle...)提供了同一接口。因为每个数据库的底层原理不相同，所以Sun公司给出一套接口规范，让各个数据库厂商去实现这些接口，提供连接数据库，增删改查数据库的方法，这就是JDBC"
				}
			]
		},
		{
			"ID": "20230215210806-4nmnhkk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-4nmnhkk",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC快速入门"
				}
			]
		},
		{
			"ID": "20230215210806-4r479f9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-4r479f9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC程序编写步骤："
				}
			]
		},
		{
			"ID": "20230215210806-s12oftv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-s12oftv",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-3jo72wr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-3jo72wr",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-6w0rehy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-6w0rehy",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注册驱动 - 加载Driver类"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-nahnmv5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-nahnmv5",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-r8erhcb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-r8erhcb",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取连接 - 得到Connection"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-vl7t8t7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-vl7t8t7",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-0eawnr2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-0eawnr2",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "增删改查 - 发送相关SQL语句给Mysql执行"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-6s4gzzv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-6s4gzzv",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-z6ysvsu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-z6ysvsu",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "释放资源 - 关闭相关连接"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-9ch5zyx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-9ch5zyx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC连接数据库的方式"
				}
			]
		},
		{
			"ID": "20230215210806-8vkctsf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-8vkctsf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-p29u9va",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-p29u9va",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-a77jvqh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-a77jvqh",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法一：通过实例化Driver对象。依赖性过强，灵活性差。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-2wh5kyq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-2wh5kyq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import com.mysql.cj.jdbc.Driver;\n//import com.mysql.jdbc.Driver;已经被废弃了\n\npublic static void main(String[] args) throws SQLException, ClassNotFoundException {\n        //创建Driver对象\n        Driver driver = new Driver();\n        //得到连接\n        //jdbc:mysql://表示协议，是Mysql协议，即通过jdbc连接mysql\n        //localhost:3306表示数据库的端口\n        //user表示数据库名\n        //mysql的连接本质就是Socket连接\n        String url = \"jdbc:mysql://localhost:3306/user\";\n        //将用户名和密码放入到Properties对象中\n        Properties properties = new Properties();\n        properties.setProperty(\"user\",\"root\");//用户名user\n        properties.setProperty(\"password\",\"root\");//密码password\n        driver.connect(url,properties);\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-qz44fub",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-qz44fub",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-xqbj5z0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-xqbj5z0",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-kah85zj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-kah85zj",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法二：使用反射加载Driver对象。更灵活"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-co4ld8u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-co4ld8u",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) throws Exception {\n        //利用反射加载Driver对象到内存中\n        Driver driver = (Driver) Class.forName(\"com.mysql.cj.jdbc.Driver\").getConstructor().newInstance();\n        //得到连接\n        //jdbc:mysql://表示协议，是Mysql协议，即通过jdbc连接mysql\n        //localhost:3306表示数据库的端口\n        //user表示数据库名\n        //mysql的连接本质就是Socket连接\n        String url = \"jdbc:mysql://localhost:3306/user\";\n        //将用户名和密码放入到Properties对象中\n        Properties properties = new Properties();\n        properties.setProperty(\"user\",\"root\");//用户名user\n        properties.setProperty(\"password\",\"root\");//密码password\n        driver.connect(url,properties);\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-yffzcyx",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-yffzcyx",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-ji6q3qt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-ji6q3qt",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-y2rslnv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-y2rslnv",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法三：使用反射加载驱动"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-xicff0w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-xicff0w",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n    public static void main(String[] args) throws SQLException, ClassNotFoundException {\n        String url = \"jdbc:mysql://localhost:3306/user\";\n        Driver driver = (Driver) Class.forName(\"com.mysql.cj.jdbc.Driver\").getConstructor().newInstance();\n        DriverManager.registerDriver(driver);//注册驱动，其实这一步是非必须的。参见方法4\n        Properties properties = new Properties();\n        properties.setProperty(\"user\",\"root\");//用户名user\n        properties.setProperty(\"password\",\"root\");//密码password\n        Connection connection = DriverManager.getConnection(url, properties);\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-3q1uvgj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-3q1uvgj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-qb8xmbb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-qb8xmbb",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-ysm8rp2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-ysm8rp2",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法四：使用反射静态加载驱动并"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "自动注册"
								},
								{
									"Type": "NodeText",
									"Data": "，并使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DriverManager"
								},
								{
									"Type": "NodeText",
									"Data": "​得到连接。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ux6ttrz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ux6ttrz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n    public static void main(String[] args) throws SQLException, ClassNotFoundException {\n        String url = \"jdbc:mysql://localhost:3306/user\";\n        Class.forName(\"com.mysql.cj.jdbc.Driver\");//加载驱动到内存中，会自动注册。\n        Properties properties = new Properties();\n        properties.setProperty(\"user\",\"root\");//用户名user\n        properties.setProperty(\"password\",\"root\");//密码password\n        Connection connection = DriverManager.getConnection(url, properties);\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-gywnjx5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-gywnjx5",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么会自动注册呢？我们来看一下Driver的代码："
				}
			]
		},
		{
			"ID": "20230215210806-ie4tr82",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ie4tr82",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Driver extends NonRegisteringDriver implements java.sql.Driver {\n    public Driver() throws SQLException {\n    }\n\n    static {\n        try {\n            DriverManager.registerDriver(new Driver());\n        } catch (SQLException var1) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-p2wcgl6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-p2wcgl6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，Driver中有static代码块，当我们用反射加载这个类的时候，\u003cclinit\u003e方法会收集执行static的内容，执行的时候就会自动为我们注册驱动了。"
				}
			]
		},
		{
			"ID": "20230215210806-hmgznlz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-hmgznlz",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-k1q7yvr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-k1q7yvr",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-p72skg5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-p72skg5",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法五：自动注册"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ufbl5j7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ufbl5j7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Mysql5.1.6之后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Class.forName(\u0026quot;com.mysql.cj.jdbc.Driver\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​这句语句也不需要了，因为jdk1.5之后使用了jdbc4，不在需要显示地调用Class.forName去加载驱动了，系统会自动调用jdbc包下地META-INF/services/java .sql.Driver文本中的类名去注册。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1661155517457-46f6ce1e-40fc-4cb0-b152-cf903b46040f.png#averageHue=%23294e58\u0026clientId=ube2586b2-e43f-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=282\u0026id=uf22d76f0\u0026name=image.png\u0026originHeight=282\u0026originWidth=271\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=12203\u0026status=error\u0026style=none\u0026taskId=u8a6f6b0b-4f35-43e5-8e17-ba8c6df26d7\u0026title=\u0026width=271"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1661155772542-28c922d8-a7d2-42df-adf9-e15d89e7c0a3.png#averageHue=%23093543\u0026clientId=ube2586b2-e43f-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=135\u0026id=ue3a07716\u0026name=image.png\u0026originHeight=135\u0026originWidth=344\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=4701\u0026status=error\u0026style=none\u0026taskId=ueb056baf-3f74-415f-98f1-cec3cca01ef\u0026title=\u0026width=344"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "jdbc会自动去注册"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "com.mysql.cj.jdbc.Driver"
				},
				{
					"Type": "NodeText",
					"Data": "​，就不需要我们用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "class.forName(\u0026quot;com.mysql.cj.jdbc.Driver\u0026quot;)"
				},
				{
					"Type": "NodeText",
					"Data": "​去注册了。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "但是还是建议写上"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**class.forName()**"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-k5wctu9",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-k5wctu9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-1z1m0bz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230215210806-1z1m0bz",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-ufghucx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-ufghucx",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法六：引入配置文件，让连接更加灵活"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-tmz4kuf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-tmz4kuf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说就是把数据库url，用户名，密码写成一些properties文件，再通过Properties类去读取信息，连接数据库。这样的连接更加灵活。"
				}
			]
		},
		{
			"ID": "20230215210806-pom3t2f",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-pom3t2f",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultSet"
				}
			]
		},
		{
			"ID": "20230215210806-wv1k23s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-wv1k23s",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultSet表示数据库结果集的一个表。通常是Select语句返回的结果表。ResultSet中由一个迭代器，指针默认指向当前ResultSet的第一行数据"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "之前"
				},
				{
					"Type": "NodeText",
					"Data": "（也就是表头，id，name那一列，刚开始是没有指向数据的。），当执行next()方法 时，指针移到下一行数据，当没有下一行时，返回false。因此可以用while循环遍历ResultSet。\n下面以遍历students表为例子："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1661164294756-2ac72ac2-149e-4099-af6f-271ed099b5e9.png#averageHue=%23f5f4f2\u0026clientId=u687c5b96-7170-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=142\u0026id=u544a2ffd\u0026name=image.png\u0026originHeight=142\u0026originWidth=124\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=3026\u0026status=error\u0026style=none\u0026taskId=u97a9338f-7070-4c72-a6b2-8c5e99e5669\u0026title=\u0026width=124"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-vwqlfjn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-vwqlfjn",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/user\",\"root\",\"root\");\nStatement statement = conn.createStatement();\nResultSet resultSet = statement.executeQuery(\"select * from  students\");\n\nwhile(resultSet.next()) {\n  int id = resultSet.getInt(1);//获取第一列的数据，是id，int类型\n  String name = resultSet.getString(2);//第二列是name，String类型\n  System.out.println(\"id=\"+id +\"name=\"+name);\n\n  //关闭流！\n  conn.close();\n  statement.close();\n  resultSet.close();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-rjav00t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-rjav00t",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "id=1name=张三\nid=2name=李四\nid=3name=王五\nid=4name=刘七\nid=5name=张一龙"
				}
			]
		},
		{
			"ID": "20230215210806-7mn4ixu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-7mn4ixu",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Statement"
				}
			]
		},
		{
			"ID": "20230215210806-b10eph4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-b10eph4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Statement用于执行一条SQL语句并返回其生成的结果的对象（ResultSet）。除了Statement之外，还有PreparedStatement（预处理）、CallableStatement（存储过程）。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用Statement存在SQL注入风险。"
				},
				{
					"Type": "NodeText",
					"Data": "SQL注入式利用某些系统没有对用户输入的数据进行充分的检查，而用户输入的数据中注入了非法的SQL语句，恶意攻击数据库。使用预处理，就可以避免SQL注入。"
				}
			]
		},
		{
			"ID": "20230215210806-jwqoa7x",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230215210806-jwqoa7x",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是SQL注入"
				}
			]
		},
		{
			"ID": "20230215210806-z0ipwnm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-z0ipwnm",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一张用户表（users）："
				}
			]
		},
		{
			"ID": "20230215210806-d22j5vf",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230215210806-d22j5vf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "name"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "pwd"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "root"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1234567"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-owf90ym",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-owf90ym",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们登录的时候，向数据库查询输入的用户名和密码在数据库中是否匹配。"
				}
			]
		},
		{
			"ID": "20230215210806-74ckyeb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-74ckyeb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--正常SQL查询\nSELECT * FROM users WHERE `name`='root' AND pwd='1234567';\n\n--SQL注入\n--传递用户名为：1' or\n--传递密码为：or '1'='1\n--那么在查询的时候，sql语句就会变成\nSELECT * FROM users WHERE `name`='1' or' AND pwd='or '1'='1';\n--条件变成了 3个或条件，前面两个是不成立的，但第三个是永远成立的。所也可以查询到数据！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-jzk487j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-jzk487j",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "所以在开发中，Statement是不会使用的！因为它极其不安全！建议使用PreparedStatement"
				}
			]
		},
		{
			"ID": "20230215210806-bwqo9ni",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-bwqo9ni",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PreparedStatement"
				}
			]
		},
		{
			"ID": "20230215210806-jwokuun",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-jwokuun",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "预处理的好处："
				}
			]
		},
		{
			"ID": "20230215210806-n4fmvgv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-n4fmvgv",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-pq73xj1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-pq73xj1",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-qk92kax",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-qk92kax",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们不再使用+号拼接SQL语句了，如："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "\u0026quot;SELECT * FROM users WHERE "
								},
								{
									"Type": "NodeText",
									"Data": "​name"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=\u0026quot;+name+\u0026quot; AND pwd=\u0026quot;+pwd;"
								},
								{
									"Type": "NodeText",
									"Data": "​将变为=\u003e "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SELECT * FROM users WHERE "
								},
								{
									"Type": "NodeText",
									"Data": "​name"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=? AND pwd=?;"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-ffzl39d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-ffzl39d",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-aobuzf3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-aobuzf3",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有效的解决了SQL注入问题"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-zbnfudm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-zbnfudm",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-35gulas",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-35gulas",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "减少了编译次数，效率高"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-ym164z0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ym164z0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "预处理使用了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?"
				},
				{
					"Type": "NodeText",
					"Data": "​占位符。我们可以看到PreparedStatement提供了很多set方法，而每个set方法的第一个参数又是parameterIndex，这个参数表示第几个占位符。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://cdn.nlark.com/yuque/0/2022/png/29698283/1661177230879-c4af10cf-f3c1-4e91-83eb-39ddab828135.png#averageHue=%2313414f\u0026clientId=u687c5b96-7170-4\u0026errorMessage=unknown%20error\u0026from=paste\u0026height=644\u0026id=u9425b417\u0026name=image.png\u0026originHeight=644\u0026originWidth=369\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=28500\u0026status=error\u0026style=none\u0026taskId=u5e77b364-e987-4418-9641-264d56a8143\u0026title=\u0026width=369"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "其中重要的方法有：所有set方法，以及executeQuery执行查询（执行一个SELECT语句）、executeUpdate执行修改（执行一条DML语句）"
				}
			]
		},
		{
			"ID": "20230215210806-u0e54hg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-u0e54hg",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String sql = \"SELECT  * FROM students WHERE id=?\";\nPreparedStatement preparedStatement = conn.prepareStatement(sql);\npreparedStatement.setInt(1,1);\n//preparedStatement.setInt(1,1);表示把语句中第一个出现的?设置为int类型，值为1，即：SELECT  * FROM students WHERE id=1\nResultSet resultSet = preparedStatement.executeQuery();//通过executeQuery方法来查询，返回结果集\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-48dnomc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-48dnomc",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String sql = \"INSERT INTO students VALUES(?,?)\";\nPreparedStatement preparedStatement = conn.prepareStatement(sql);\npreparedStatement.setInt(1,9465);\npreparedStatement.setString(2,\"刘梦\");\nint result = preparedStatement.executeUpdate();\nif(result\u003e0){\n  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-wxrrnlk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-wxrrnlk",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC API"
				}
			]
		},
		{
			"ID": "20230215210806-5dj9196",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-5dj9196",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC相关的类和接口，都放在java.sql和javax.sql（拓展包，功能更强）中。"
				}
			]
		},
		{
			"ID": "20230215210806-siyot5t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-siyot5t",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DriverManager"
				}
			]
		},
		{
			"ID": "20230215210806-1ao6g3r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-1ao6g3r",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public static Connection getConnection(String url,String user, String password)"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230215210806-y8umv1f",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-y8umv1f",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Connection"
				}
			]
		},
		{
			"ID": "20230215210806-i0dere0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-i0dere0",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Statement createStatement()"
				},
				{
					"Type": "NodeText",
					"Data": "​创建Statement对象\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PreparedStatement prepareStatement(String sql)"
				},
				{
					"Type": "NodeText",
					"Data": "​获取PreparedStatement对象"
				}
			]
		},
		{
			"ID": "20230215210806-xscds39",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-xscds39",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Statement"
				}
			]
		},
		{
			"ID": "20230215210806-11wiol8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-11wiol8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ResultSet executeQuery(String sql)"
				},
				{
					"Type": "NodeText",
					"Data": "​执行一条查询语句\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int executeUpdate(String sql)"
				},
				{
					"Type": "NodeText",
					"Data": "​执行一条DML语句"
				}
			]
		},
		{
			"ID": "20230215210806-bgt8i2x",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230215210806-bgt8i2x",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PreparedStatement"
				}
			]
		},
		{
			"ID": "20230215210806-xley5fo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-xley5fo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "void setXXX (int parameterIndex, XXX x) "
				},
				{
					"Type": "NodeText",
					"Data": "​设置占位符类型与值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ResultSet executeQuery()"
				},
				{
					"Type": "NodeText",
					"Data": "​执行查询命令，返回结果集\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int executeUpdate()"
				},
				{
					"Type": "NodeText",
					"Data": "​执行一条DML语句，返回影响的行数"
				}
			]
		},
		{
			"ID": "20230215210806-za2kqq8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-za2kqq8",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultSet"
				}
			]
		},
		{
			"ID": "20230215210806-hh4v9xl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-hh4v9xl",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "boolean next()"
				},
				{
					"Type": "NodeText",
					"Data": "​指针移至下一条数据\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "boolean previous()"
				},
				{
					"Type": "NodeText",
					"Data": "​指针移至上一条数据\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "XXX getXXX(String columnLabel)"
				},
				{
					"Type": "NodeText",
					"Data": "​根据列的名字获取数据（数据是int类型就是 int getInt(String columnLable)）\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "XXX getXXX(int columnIndex)"
				},
				{
					"Type": "NodeText",
					"Data": "​根据列的索引返回数据"
				}
			]
		},
		{
			"ID": "20230215210806-5mkqu09",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-5mkqu09",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC Utils"
				}
			]
		},
		{
			"ID": "20230215210806-a4ig9li",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-a4ig9li",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常会把数据库的连接和关闭封装成一个类。连接所需的信息用IO流Properties输出和读取。"
				}
			]
		},
		{
			"ID": "20230215210806-eg1hqze",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-eg1hqze",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHJvcGVydGllcw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "url=jdbc:mysql://localhost:3306/user\nuser=root\npwd=root\ndriver=com.mysql.cj.jdbc.Driver\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-uy1qg0z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-uy1qg0z",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package Sql;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.sql.*;\nimport java.util.Properties;\n\npublic class JDBCUtils {\n    private static String url;\n    private static String user;\n    private static String pwd;\n    private static String driver;\n\n    static{\n        //使用静态代码块初始数据；\n        Properties properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"src/Sql/mysql.properties\"));\n            url = properties.getProperty(\"url\");\n            user = properties.getProperty(\"user\");\n            pwd = properties.getProperty(\"pwd\");\n            driver = properties.getProperty(\"driver\");\n\n        } catch (IOException e) {\n            throw new RuntimeException(e);//打包成运行时异常，这样调用者也可以捕获该异常，也可以默认处理该异常\n        }\n    }\n\n    /**\n     *\n     * @return  返回一个连接\n     * @throws SQLException\n     */\n    public static Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(url,user,pwd);\n    }\n\n    /**\n     * JDBC释放资源\n     * @param resultSet if not exist,enter null\n     * @param statement if not exist,enter null\n     * @param connection if not exist,enter null\n     * @throws SQLException\n     */\n    public static void close(ResultSet resultSet, Statement statement,Connection connection)  {\n        try{\n            if(resultSet!=null){\n                resultSet.close();\n            }\n            if(statement!=null){\n                statement.close();\n            }\n            if(connection!=null){\n                connection.close();\n            }\n        }catch (SQLException e){\n           throw new RuntimeException(e);\n        }\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-nxjczv6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-nxjczv6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Connection connection = JDBCUtils.getConnection();\n//com.mysql.cj.jdbc.ConnectionImpl@73d4cc9e\nJDBCUtils.close(null,null,connection);\nSystem.out.println(connection);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-oz3c5vo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-oz3c5vo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC事务"
				}
			]
		},
		{
			"ID": "20230215210806-tny1r5m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-tny1r5m",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JDBC程序中，当一个Connection对象成功创建时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "默认情况下是自动提交事务的：每执行一条SQL语句的时候，如果执行成功，就会自动提交（commit）事务。"
				},
				{
					"Type": "NodeText",
					"Data": "\n得到Connection之后，调用Connection的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "setAutoCommit()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，可以设置JDBC是否自动提交事务。\n在所有SQL语句都指向成功后，再调用Connection的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "commit()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法来提交事务，\n当在某条sql语句操作失败或异常后，调用Connection的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "rollback()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法回滚事务。"
				}
			]
		},
		{
			"ID": "20230215210806-6wua1aj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-6wua1aj",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Connection connection = JDBCUtils.getConnection();\ntry{\n  7*//马云给马化腾转账100元\n  PreparedStatement preparedStatement = connection.prepareStatement(\"UPDATE account SET balance = balance -100 WHERE `name`='马云'\");\n  //马云账户上-100元\n  preparedStatement.executeUpdate();//执行，并自动commit\n\n  int i =5/0;//在try代码块中，这行会报错，后面的代码不会执行\n  PreparedStatement preparedStatement1 = connection.prepareStatement(\"UPDATE account SET balance = balance +100 WHERE `name`='马化腾'\");\n  //马化腾账户上+100元\n  preparedStatement1.executeUpdate();//执行，并自动commit\n\n}catch(SQLException e){\n  throw new RuntimeException(e);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-dhmxokh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-dhmxokh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果转账过程中出现了异常代码，使得转账只执行了一半，这问题是很严重的。所以我们要用事务来解决这个问题。"
				}
			]
		},
		{
			"ID": "20230215210806-5ndkc48",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-5ndkc48",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Connection connection = JDBCUtils.getConnection();\n\ntry{\n    connection.setAutoCommit(false);//设置为不自动提交，相当于开启了事务\n    //马云给马化腾转账100元\n    PreparedStatement preparedStatement = connection.prepareStatement(\"UPDATE account SET balance = balance -100 WHERE `name`='马云'\");\n    //马云账户上-100元\n    preparedStatement.executeUpdate();//执行\n\n    int i =5/0;//在try代码块中，这行会报错，后面的代码不会执行\n    PreparedStatement preparedStatement1 = connection.prepareStatement(\"UPDATE account SET balance = balance +100 WHERE `name`='马化腾'\");\n    //马化腾账户上+100元\n    preparedStatement1.executeUpdate();//执行\n\n}catch(SQLException e){\n    connection.rollback();//回滚到事务开始的时候\n    throw new RuntimeException(e);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-zid2ju9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-zid2ju9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "批处理Bath"
				}
			]
		},
		{
			"ID": "20230215210806-esxbeh5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-esxbeh5",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们需要批量插入数据，或者批量更新记录的时候，可以采用Java批量更新机制，它允许一次性提交多条数据给数据库处理，效率更高。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "void addBatch(String sql)"
				},
				{
					"Type": "NodeText",
					"Data": "​添加需要批处理的SQL语句或参数（添加到批处理容器\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int[] executeBatch()"
				},
				{
					"Type": "NodeText",
					"Data": "​处理一批SQL语句\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "void clearBatch()"
				},
				{
					"Type": "NodeText",
					"Data": "​清空批处理容器\n在使用批处理是，需要在url中添加参数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?rewriteCatchStatements=true"
				},
				{
					"Type": "NodeText",
					"Data": "​才能生效"
				}
			]
		},
		{
			"ID": "20230215210806-sdnqayp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-sdnqayp",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHJvcGVydGllcw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//先修改url，加上批处理参数\nurl=jdbc:mysql://localhost:3306/user?rewriteCatchStatements=true\nuser=root\npwd=root\ndriver=com.mysql.cj.jdbc.Driver\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-hiodph9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-hiodph9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Connection connection = JDBCUtils.getConnection();\nString sql = \"INSERT INTO students VALUES (?,?)\";\nPreparedStatement preparedStatement = connection.prepareStatement(sql);\nfor (int i = 0; i \u003c 5000; i++) {\n    preparedStatement.setInt(1,i);\n    preparedStatement.setString(2,\"测试样例\");\n    preparedStatement.addBatch();\n    if((i+1)%1000==0){//每1000调执行一次，然后清空Batch容器\n        preparedStatement.executeBatch();\n        preparedStatement.clearBatch();\n    }\n}\nJDBCUtils.close(null,preparedStatement,connection);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-0e3ykjo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-0e3ykjo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "addBatch底层维护的是一个叫做batchedArgs的ArrayList容器"
				}
			]
		},
		{
			"ID": "20230215210806-j31gdii",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-j31gdii",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "连接池"
				}
			]
		},
		{
			"ID": "20230215210806-ymigpeh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-ymigpeh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么要连接池"
				}
			]
		},
		{
			"ID": "20230215210806-9ryhbz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-9ryhbz7",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个数据库，经常都是被多个用户同时连接的，同时上百万，甚至上亿个用户同时连接同一个数据库。这种情况数据库会因为连接数过多而崩溃"
				}
			]
		},
		{
			"ID": "20230215210806-m6eakey",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-m6eakey",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for (int i = 0; i \u003c 5000; i++) {\n    Connection connection = JDBCUtils.getConnection();//连接数据库5000次\n}\n//异常：Too many connections！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-qo5vzux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-qo5vzux",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "才5000次，数据库就崩溃了，这怎么能行呢？如果我们连接后关闭连接呢？"
				}
			]
		},
		{
			"ID": "20230215210806-xln75c4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-xln75c4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for (int i = 0; i \u003c 5000; i++) {\n    JDBCUtils.getConnection();//连接数据库5000次\n    JDBCUtils.close(null,null,connection);\n}\n//耗时7000ms，非常的慢！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-ikiqkjq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ikiqkjq",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的情况还是比较温和的，但是实际情况中，都是十几万，几十万大的用户量，高并发的连接、操作数据库。\n传统获取连接的方式，由于不能控制创建连接的数量，如果连接过多，就可能导致内存泄漏、Mysql崩溃。\n为了解决这些问题，数据库连接池（connection pool）诞生了。"
				}
			]
		},
		{
			"ID": "20230215210806-r4cifv1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-r4cifv1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "连接池的基本介绍"
				}
			]
		},
		{
			"ID": "20230215210806-svpx8jb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-svpx8jb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "连接池顾名思义，就是一个装着一些连接的池子。当有程序需要连接数据库的时候，就从连接池里取出一个连接，然后使用这个连接，用完之后再将它"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "放回连接池（可复用性）"
				},
				{
					"Type": "NodeText",
					"Data": "。当然，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接池里的连接数量也是有限的"
				},
				{
					"Type": "NodeText",
					"Data": "，如果一下子太多用户要连接，那没抢到连接的用户就会被加入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "等待队列。"
				},
				{
					"Type": "NodeText",
					"Data": "\n当你使用了连接池之后，分配、管理和释放连接都将交由连接池管理。"
				}
			]
		},
		{
			"ID": "20230215210806-61kxbtt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-61kxbtt",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "连接池的种类"
				}
			]
		},
		{
			"ID": "20230215210806-nd1febe",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-nd1febe",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-c60yqee",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-c60yqee",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-y6t8454",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-y6t8454",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC数据库连接池使用javax.sql.DataSource来表示。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-8ak9249",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-8ak9249",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-5swa8xn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-5swa8xn",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "C3P0"
								},
								{
									"Type": "NodeText",
									"Data": "数据库连接池，速度相对较慢，但稳定性好（hibernate，spring）"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-3pxspwo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230215210806-3pxspwo",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-banxqr4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-banxqr4",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DBCP数据库连接池，速度相对C3P0较快，但不稳定"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-bjct7uw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230215210806-bjct7uw",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-wgm6uce",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-wgm6uce",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Proxool数据库连接池，有监控连接池状态的功能，稳定性较C3P0差一点"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-ztbf2oy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230215210806-ztbf2oy",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-hw2o984",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-hw2o984",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BoneCP数据库连接池，速度快"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-hwndx0b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230215210806-hwndx0b",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-nqwkvhi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-nqwkvhi",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Druid"
								},
								{
									"Type": "NodeText",
									"Data": "（德鲁伊）是阿里提供的数据库连接池，集DBCP，C3P0，Proxool优点于一身。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-pb32ft1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-pb32ft1",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C3P0"
				}
			]
		},
		{
			"ID": "20230215210806-ovcwe47",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-ovcwe47",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) throws IOException, SQLException, ClassNotFoundException, PropertyVetoException {\n    Properties properties = new Properties();\n    properties.load(new FileInputStream(\"src/Sql/mysql.properties\"));\n    String driver = properties.getProperty(\"driver\");\n    String url = properties.getProperty(\"url\");\n    String user = properties.getProperty(\"user\");\n    String pwd = properties.getProperty(\"pwd\");\n\n    ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n    comboPooledDataSource.setDriverClass(driver);\n    comboPooledDataSource.setJdbcUrl(url);\n    comboPooledDataSource.setUser(user);\n    comboPooledDataSource.setPassword(pwd);\n    comboPooledDataSource.setInitialPoolSize(10);\n    comboPooledDataSource.setMaxPoolSize(50);\n    long start = System.currentTimeMillis();\n    for (int i = 0; i \u003c 5; i++) {\n        Connection connection = comboPooledDataSource.getConnection();\n        connection.close();\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(end-start);//199ms，非常快！\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-fqiewtb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-fqiewtb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "c3p0-0.9.2.1需要导入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "c3p0.jar"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mchange-commoons-java.jar"
				},
				{
					"Type": "NodeText",
					"Data": "​两个包，不然会报"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ClassNotFound"
				},
				{
					"Type": "NodeText",
					"Data": "​异常。\nC3P0通过创建数据源对象"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ComboPooledDataSource"
				},
				{
					"Type": "NodeText",
					"Data": "​，来获取线程池。它提供了一系列set方法来设置连接信息。以及"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "setInitialPoolSize(int initialPoolSize)"
				},
				{
					"Type": "NodeText",
					"Data": "​方法来设置连接池"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "初始连接数"
				},
				{
					"Type": "NodeText",
					"Data": "，以及"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "setMaxPoolSize(int maxPoolSize)"
				},
				{
					"Type": "NodeText",
					"Data": "​方法来设置连接池"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "最大连接数"
				},
				{
					"Type": "NodeText",
					"Data": "。\n如果初始连接数不够用，连接池会增长连接数，最大增到最大连接数，之后如果还不够用，就会使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "等待队列"
				},
				{
					"Type": "NodeText",
					"Data": "。\n还有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public void setAcquireIncrement(int acquireIncrement)"
				},
				{
					"Type": "NodeText",
					"Data": "​方法来设置超出初始连接数之后，每次增长的连接数。以及"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public void setMinPoolSize(int minPoolSize)"
				},
				{
					"Type": "NodeText",
					"Data": "​方法来设置最小连接数。如果有富余，会自动减少到最小连接数。\n还可以使用XML读取配置文件，读取XML文件要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public ComboPooledDataSource(String configName)"
				},
				{
					"Type": "NodeText",
					"Data": "​构造器来构造数据源，C3P0会自动读取xml文件，就可以省去一堆的set方法和Properties了。"
				}
			]
		},
		{
			"ID": "20230215210806-ibkdzyn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-ibkdzyn",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Druid德鲁伊"
				}
			]
		},
		{
			"ID": "20230215210806-8w0j7q4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-8w0j7q4",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "德鲁伊史目前使用最广泛的数据库连接池。\n它提供了一个数据源工厂"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DruidDataSourceFactory"
				},
				{
					"Type": "NodeText",
					"Data": "​来创造数据源：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DataSource dataSource = DruidDataSourceFactory._createDataSource_(properties);"
				},
				{
					"Type": "NodeText",
					"Data": "​\nproperties必须包含以下字段，不可改名，这些字段由createDataSource自动识别。\n其余使用跟C3P0差不多。"
				}
			]
		},
		{
			"ID": "20230215210806-7oy9f83",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-7oy9f83",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHJvcGVydGllcw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "driverClassName=com.mysql.cj.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/user\nusername=root\npassword=root\ninitialSize=5\nmaxActive=10\nmaxWait=3000\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-bt8uum6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-bt8uum6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于Druid的更多功能，以后开专门的专题再介绍。"
				}
			]
		},
		{
			"ID": "20230215210806-rr2uh5h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-rr2uh5h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Apache-DBUtils"
				}
			]
		},
		{
			"ID": "20230215210806-r2t9a9r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-r2t9a9r",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么要Apach-DBUtils"
				}
			]
		},
		{
			"ID": "20230215210806-hlnnd8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-hlnnd8u",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultSet在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接关闭之后"
				},
				{
					"Type": "NodeText",
					"Data": "无法复用，而且ResutlSet的数据结构不便于操作。\n首先，ResutSet和Connection是关联的，如果连接被关闭了，那结果集也就寄了。其次，结果集的操作体验感也很不好，一堆get方法，并不明显get的东西是什么，只知道get的数据的类型，如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getInt"
				},
				{
					"Type": "NodeText",
					"Data": "​."
				}
			]
		},
		{
			"ID": "20230215210806-1i3c6oi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-1i3c6oi",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于这些问题，我们可以这样子解决：\n假设我们对学生表经行查找"
				}
			]
		},
		{
			"ID": "20230215210806-0b1s8w9",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230215210806-0b1s8w9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "students"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-1jn9vhd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-1jn9vhd",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以搞一个Student对象，把id和name封装进去。"
				}
			]
		},
		{
			"ID": "20230215210806-w18omt6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-w18omt6",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Student{\n    private Integer id;\n    private String name;\n\n    public Student(){}//一定要给无参构造，应为底层可能用到反射\n    public Student(Integer id,String name){\n        this.id = id;\n        this.name= name;\n    }\n\n    public getId(){\n        return id;\n    }\n    public getName(){\n        return name;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-0fc9tqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-0fc9tqs",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样由数据表结构封装而来的类，就叫做"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "**JavaBean**"
				},
				{
					"Type": "NodeText",
					"Data": "​。但是student不止一个，所以我们需要用到集合，将所有Student对象装到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ArrayList\u0026lt;Student\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​中。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "JavaBean必须要有getter和setter还有无参构造器。"
				}
			]
		},
		{
			"ID": "20230215210806-fzspkr9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-fzspkr9",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package Sql;\n\npublic class Student {\n    private Integer id;//用包装类，因为数据库里面的默认值是null，而java里的int类型默认值是0，Integer的默认值是null\n    private String name;\n\n    public Student(Integer id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public Student() {//必须要有无参构造器。因为BeanListHandler使用的是反射来获取类的信息。\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-rdrb205",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230215210806-rdrb205",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//Druid获取数据源\nProperties properties = new Properties();\nproperties.load(new FileInputStream(\"src/Sql/druid.properties\"));\nDataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n\n//DBUtils\nQueryRunner queryRunner = new QueryRunner(dataSource);\nList\u003cStudent\u003e result   = queryRunner.query(\"SELECT * from  students\", new BeanListHandler\u003c\u003e(Student.class));\nfor (Student student : result) {\n    System.out.println(student);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230215210806-8g3pvuf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-8g3pvuf",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里只对DBUtils做简单介绍，因为DBUtils已经过时，并且被Mybatis取代了。"
				}
			]
		},
		{
			"ID": "20230215210806-wj80r7h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230215210806-wj80r7h",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DAO增删查改-BasicDAO"
				}
			]
		},
		{
			"ID": "20230215210806-ufmaazb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-ufmaazb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DAO的全名是Data Access Object，数据访问对象。"
				}
			]
		},
		{
			"ID": "20230215210806-368fth2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-368fth2",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么需要DAO"
				}
			]
		},
		{
			"ID": "20230215210806-qpdj5y3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-qpdj5y3",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然Druid+DBUtils已经给我们的开发带了很多便利，但是他们还是存在不足的："
				}
			]
		},
		{
			"ID": "20230215210806-cx08z4j",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230215210806-cx08z4j",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"ID": "20230215210806-q7rr1fj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230215210806-q7rr1fj",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-qcapnf3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-qcapnf3",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SQL语句过于固定，？通配符只能用在过滤条件后面，如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "id=?"
								},
								{
									"Type": "NodeText",
									"Data": "​，而查询什么数据，查询哪一张表是不能使用通配符的。"
								}
							]
						}
					]
				},
				{
					"ID": "20230215210806-53v1ccj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230215210806-53v1ccj",
						"updated": "20230215210806"
					},
					"Children": [
						{
							"ID": "20230215210806-6337pgh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230215210806-6337pgh",
								"updated": "20230215210806"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于查询操作，一个表就要一种类型，students表就是List\u003cStudent\u003e，goods表就是List\u003cGoods\u003e,所以这里还要用到泛型来封装一个查询过程。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230215210806-274hkrb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230215210806-274hkrb",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DAO层和JavaBean"
				}
			]
		},
		{
			"ID": "20230215210806-jzdi0bo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230215210806-jzdi0bo",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DAO层就是直接操作数据库的地方，DAO层操作数据库，并将数据库里的数据，通过JavaBean封装成一个ArrayList\u003c\u003e集合。\n每一张表都会有对应的DAO层和JavaBean对象。其中，DAO层中对数据库的操作，连接和释放资源是耦合的，所以可以将连接和释放封装到BasicDAO里，各个DAO再继承BasicDAO。\n在后续JavaWeb会详细介绍。"
				}
			]
		},
		{
			"ID": "20230215210806-36jfg2q",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230215210806-36jfg2q",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正则"
				}
			]
		},
		{
			"ID": "20230215210806-yyio8oh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230215210806-yyio8oh",
				"updated": "20230215210806"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java新特性"
				}
			]
		}
	]
}